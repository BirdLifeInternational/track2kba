panel.border = element_rect(colour = "black", fill=NA, size=1)) +
ylab("Latitude") +  xlab("Longitude") + guides(colour=FALSE)
KBAs <- findKBA(KDE.Surface$KDE.Surface, Represent=repr$out, popSize = popsize, polyOut = F, plot=T)
potentialKBA
plot(potentialKBA)
plot(KBA)
KBA <- potentialKBA
plot(KBA)
Colony
denseplot
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ###
#### CONVERT OUTPUT INTO POLYGONS WITH KBA ASSESSMENT INFO
### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ###
### the first step is very slow
KBApoly <- as(potentialKBA, "SpatialPolygonsDataFrame")
potentialKBA <- NULL
### aggregate all pixel-sized polygons into big polygons with the same number of birds
OUTMAP <- raster::aggregate(KBApoly, c('N_animals','N_IND','potentialKBA'))
KBApoly <- NULL
### CONVERT INTO SIMPLE FEATURE AS OUTPUT AND FOR PLOTTING
KBA_sf <- sf::st_as_sf(OUTMAP) %>%
sf::st_union(by_feature = TRUE) %>%
smoothr::smooth(method = "densify") %>%
sf::st_transform(4326) %>%
arrange(.data$N_IND)
coordsets <- sf::st_bbox(KBA)
csf <- coord_sf(xlim = c(coordsets$xmin, coordsets$xmax), ylim = c(coordsets$ymin, coordsets$ymax), expand = FALSE)
csf$default <- TRUE
label <- "N animals"
denseplot <- KBA %>% filter(N_animals > 0) %>% ggplot() +
geom_sf(mapping = aes(fill=.data$N_animals, colour=.data$N_animals)) +
borders("world", colour="black", fill = NA) +
csf +
scale_fill_continuous(high = "#132B43", low = "#56B1F7", name = label) +
scale_colour_continuous(high = "#132B43", low = "#56B1F7") +
theme(panel.background=element_blank(),
panel.grid.major=element_line(colour="transparent"),
panel.grid.minor=element_line(colour="transparent"),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
ylab("Latitude") +  xlab("Longitude") + guides(colour=FALSE)
KBA
KBA <- KBA_sf
coordsets <- sf::st_bbox(KBA)
csf <- coord_sf(xlim = c(coordsets$xmin, coordsets$xmax), ylim = c(coordsets$ymin, coordsets$ymax), expand = FALSE)
csf$default <- TRUE
label <- "N animals"
denseplot <- KBA %>% filter(N_animals > 0) %>% ggplot() +
geom_sf(mapping = aes(fill=.data$N_animals, colour=.data$N_animals)) +
borders("world", colour="black", fill = NA) +
csf +
scale_fill_continuous(high = "#132B43", low = "#56B1F7", name = label) +
scale_colour_continuous(high = "#132B43", low = "#56B1F7") +
theme(panel.background=element_blank(),
panel.grid.major=element_line(colour="transparent"),
panel.grid.minor=element_line(colour="transparent"),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
ylab("Latitude") +  xlab("Longitude") + guides(colour=FALSE)
potKBAarea <- KBA %>% group_by(potentialKBA) %>% summarise(N_animals = max(N_animals)) %>% filter(potentialKBA==TRUE)
denseplot <- denseplot + geom_sf(data=potKBAarea, colour="red", fill=NA) +
csf
denseplot + geom_point(data=colony, aes(x=.data$Longitude, y=.data$Latitude), col='red', shape=16, size=2)
denseplot + geom_point(data=colony, aes(x=.data$Longitude, y=.data$Latitude), col='orange', shape=16, size=2)
denseplot + geom_point(data=colony, aes(x=.data$Longitude, y=.data$Latitude), col='dark orange', shape=16, size=2)
mapKBA <- function(KBA, Colony=NULL, Show=TRUE) {
if(class(KBA)[1] == "sf"){
coordsets <- sf::st_bbox(KBA)
csf <- coord_sf(xlim = c(coordsets$xmin, coordsets$xmax), ylim = c(coordsets$ymin, coordsets$ymax), expand = FALSE)
csf$default <- TRUE
if(any(KBA$N_animals > 1)) {
label <- "N animals"
} else {
label <- "Prop. animals"
}
denseplot <- KBA %>% filter(N_animals > 0) %>% ggplot() +
geom_sf(mapping = aes(fill=.data$N_animals, colour=.data$N_animals)) +
borders("world", colour="black", fill = NA) +
csf +
scale_fill_continuous(high = "#132B43", low = "#56B1F7", name = label) +
scale_colour_continuous(high = "#132B43", low = "#56B1F7") +
theme(panel.background=element_blank(),
panel.grid.major=element_line(colour="transparent"),
panel.grid.minor=element_line(colour="transparent"),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
ylab("Latitude") +  xlab("Longitude") + guides(colour=FALSE)
# if any areas are potentialKBAs, add red border
if(any(KBA$potentialKBA == TRUE)) {
potKBAarea <- KBA %>% group_by(potentialKBA) %>% summarise(N_animals = max(N_animals)) %>% filter(potentialKBA==TRUE)
denseplot <- denseplot + geom_sf(data=potKBAarea, colour="red", fill=NA, size=1.1) +
csf
}
if(!is.null(Colony)){
denseplot <- denseplot +
geom_point(data=Colony, aes(x=.data$Longitude, y=.data$Latitude), col='dark orange', shape=16, size=2)
}
if(Show == TRUE){
print(denseplot)
} else { return(denseplot) }
} else if(class(KBA) == "SpatialPixelsDataFrame") {
denseplot <- plot(KBA)
return(denseplot)
}
}
library(track2KBA)
KBA_sf <- findKBA(KDE.Surface$KDE.Surface, Represent=repr$out, popSize = popsize, polyOut = T)
KBA_sp <- findKBA(KDE.Surface, Represent=repr$out, polyOut = F, plot=T)
KBA_sp <- findKBA(KDE.Surface, Represent=repr$out, polyOut = F)
debug(findKBA)
KBA_sp <- findKBA(KDE.Surface, Represent=repr$out, polyOut = F)
KBA_sp <- findKBA(KDE.Surface$KDE.Surface, Represent=repr$out, polyOut = F)
undebug(findKBA)
KBA_sp <- findKBA(KDE.Surface$KDE.Surface, Represent=repr$out, polyOut = F)
mapKBA(KBA_sf, Colony = colony)
library(track2KBA)
KBA_sf
mapKBA(KBA_sf, Colony = colony)
library(track2KBA)
mapKBA(KBA_sf, Colony = colony)
debug(mapKBA)
mapKBA(KBA_sf, Colony = colony)
coordsets <- sf::st_bbox(KBA)
library(track2KBA)
mapKBA
library(track2KBA)
mapKBA
library(dplyr)
library(track2KBA)
mapKBA()
mapKBA
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, field_ID = "track_id", field_Lat="latitude", field_Lon="longitude", field_Date="date_gmt", field_Time="time_gmt")
## 2a. ####
### tripSplit (split tracks in to discrete trips [and optionally filter]) ~~~~~~~~~~~~~
Trips <- tripSplit(tracks, Colony=colony, InnerBuff=2, ReturnBuff=10, Duration=1, Nests = F, rmNonTrip = T)
Trips <- subset(Trips, Trips$Returns == "Yes" )
TripSum <- tripSummary(Trips, Colony = colony, Nests = F)
Trips_prj <- projectTracks(Trips)
HVALS <- findScale(Trips_prj,
ARSscale = F,
Trip_summary = TripSum
)
## 5. ####
### estSpaceUse (Produce utilization distributions for each individual) ~~~~~~~~~~~~~~~
h <- HVALS$mag
KDE.Surface <- estSpaceUse(DataGroup=Trips_prj, Scale = h, UDLev = 50, polyOut=T)
repr <- repAssess(Trips_prj, KDE=KDE.Surface$KDE.Surface, Iteration=1, UDLev=50, avgMethod="mean", Ncores = 2)
## 7. ####
### findKBA (Identify areas of significant aggregation) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
popsize <- 500 # pairs or individuals? Oppel et al. 2015
KBA_sf <- findKBA(KDE.Surface$KDE.Surface, Represent=repr$out, popSize = popsize, polyOut = T)
KBAs
KBA_sp <- findKBA(KDE.Surface$KDE.Surface, Represent=repr$out, polyOut = F)
KBA_sp <- findKBA(KDE.Surface$KDE.Surface, Represent=repr$out, polyOut = F)
mapKBA(KBA_sf, Colony = colony)
mapKBA(KBA_sp)
debug(mapKBA)
mapKBA(KBA_sp)
denseplot <- plot(KBA)
return(denseplot)
mapKBA(KBA_sp)
denseplot
library(track2KBA)
library(track2KBA)
library(track2KBA)
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
str(tracks)
library(track2KBA)
library(track2KBA)
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
library(track2KBA)
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
trips <- tripSplit(tracks, colony=colony, innerBuff=2, returnBuff=10, duration=1, nests = F, rmNonTrip = T)
tripmaps <- mapTrips(trips, colony=colony)
trips <- subset(trips, trips$Returns == "Yes" )
trips <- subset(trips, trips$Returns == "Yes" )
tripSum <- tripSummary(trips, colony = colony, nests = F)
tripSum
frange <- median(tripSum$max_dist)
frange
c(min(tripSum$max_dist), max(tripSum$max_dist))
fduration <- median(tripSum$duration)
fduration
c(min(tripSum$duration), max(tripSum$duration))
Trips_prj <- projectTracks(trips)
library(track2KBA)
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
## 2a. ####
### tripSplit (split tracks in to discrete trips [and optionally filter]) ~~~~~~~~~~~~~
trips <- tripSplit(tracks, colony=colony, innerBuff=2, returnBuff=10, duration=1, nests = F, rmNonTrip = T)
tripmaps <- mapTrips(trips, colony=colony)
## 2b. ####
### tripSummary (summary of trip movements, by individual) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
trips <- subset(trips, trips$Returns == "Yes" )
tripSum <- tripSummary(trips, colony = colony, nests = F)
tripSum
frange <- median(tripSum$max_dist)
frange
c(min(tripSum$max_dist), max(tripSum$max_dist))
fduration <- median(tripSum$duration)
fduration
c(min(tripSum$duration), max(tripSum$duration))
## 3. ####
### project trips to equal-area projection ###
Trips_prj <- projectTracks(trips)
## 4. ####
### findScale (get average foraging range, a list of H-value options, and test whether desired grid cell for kernel estimation makes sense given movement scale/tracking resolution) ~~~~~~~~~~~~~~~
HVALS <- findScale(Trips_prj,
ARSscale = F,
Trip_summary = tripSum
)
HVALS
indEffect <- indEffectTest(trips_prj, groupVar="ID", tripID="trip_id", method="BA", scale=HVALS$mag, iterations=10)
library(track2KBA)
indEffect <- indEffectTest(trips_prj, groupVar="ID", tripID="trip_id", method="BA", scale=HVALS$mag, iterations=10)
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
## 2a. ####
### tripSplit (split tracks in to discrete trips [and optionally filter]) ~~~~~~~~~~~~~
trips <- tripSplit(tracks, colony=colony, innerBuff=2, returnBuff=10, duration=1, nests = F, rmNonTrip = T)
tripmaps <- mapTrips(trips, colony=colony)
## 2b. ####
### tripSummary (summary of trip movements, by individual) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
trips <- subset(trips, trips$Returns == "Yes" )
tripSum <- tripSummary(trips, colony = colony, nests = F)
tripSum
frange <- median(tripSum$max_dist)
frange
c(min(tripSum$max_dist), max(tripSum$max_dist))
fduration <- median(tripSum$duration)
fduration
c(min(tripSum$duration), max(tripSum$duration))
## 3. ####
### project trips to equal-area projection ###
trips_prj <- projectTracks(trips)
## 4. ####
### findScale (get average foraging range, a list of H-value options, and test whether desired grid cell for kernel estimation makes sense given movement scale/tracking resolution) ~~~~~~~~~~~~~~~
HVALS <- findScale(trips_prj,
scaleARS = F,
sumTrips = tripSum
)
HVALS
# HVALS <- findScale(trips,
#   scaleARS = T,
#   sumTrips = tripSum,
#   scalesFPT = seq(1, frange),
#   plotPeaks = T,
#   peakMethod = "first"
# )
# HVALS
## 4. ####
trips_prj <- trips_prj[trips_prj$ColDist > 2, ] # remove trip start and end points near colony
indEffect <- indEffectTest(trips_prj, groupVar="ID", tripID="trip_id", method="BA", scale=HVALS$mag, iterations=10)
h <- HVALS$mag
KDE.Surface <- estSpaceUse(tracks=trips_prj, scale = h, levelUD = 50, polyOut=T)
kde_map <- mapKDE(KDE.Surface$UDPolygons, Show=F)
ud_map <- mapKDE(KDE.Surface$KDE.Surface, Show=F)
library(track2KBA)
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
## 2a. ####
### tripSplit (split tracks in to discrete trips [and optionally filter]) ~~~~~~~~~~~~~
trips <- tripSplit(tracks, colony=colony, innerBuff=2, returnBuff=10, duration=1, nests = F, rmNonTrip = T)
tripmaps <- mapTrips(trips, colony=colony)
## 2b. ####
### tripSummary (summary of trip movements, by individual) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
trips <- subset(trips, trips$Returns == "Yes" )
tripSum <- tripSummary(trips, colony = colony, nests = F)
tripSum
frange <- median(tripSum$max_dist)
frange
c(min(tripSum$max_dist), max(tripSum$max_dist))
fduration <- median(tripSum$duration)
fduration
c(min(tripSum$duration), max(tripSum$duration))
## 3. ####
### project trips to equal-area projection ###
trips_prj <- projectTracks(trips)
## 4. ####
### findScale (get average foraging range, a list of H-value options, and test whether desired grid cell for kernel estimation makes sense given movement scale/tracking resolution) ~~~~~~~~~~~~~~~
HVALS <- findScale(trips_prj,
scaleARS = F,
sumTrips = tripSum
)
HVALS
library(dplyr)
library(track2KBA)
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
## 2a. ####
### tripSplit (split tracks in to discrete trips [and optionally filter]) ~~~~~~~~~~~~~
trips <- tripSplit(tracks, colony=colony, innerBuff=2, returnBuff=10, duration=1, nests = F, rmNonTrip = T)
tripmaps <- mapTrips(trips, colony=colony)
## 2b. ####
### tripSummary (summary of trip movements, by individual) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
trips <- subset(trips, trips$Returns == "Yes" )
tripSum <- tripSummary(trips, colony = colony, nests = F)
tripSum
frange <- median(tripSum$max_dist)
frange
c(min(tripSum$max_dist), max(tripSum$max_dist))
fduration <- median(tripSum$duration)
fduration
c(min(tripSum$duration), max(tripSum$duration))
## 3. ####
### project trips to equal-area projection ###
trips_prj <- projectTracks(trips)
## 4. ####
### findScale (get average foraging range, a list of H-value options, and test whether desired grid cell for kernel estimation makes sense given movement scale/tracking resolution) ~~~~~~~~~~~~~~~
HVALS <- findScale(trips_prj,
scaleARS = F,
sumTrips = tripSum
)
HVALS
## 4. ####
trips_prj <- trips_prj[trips_prj$ColDist > 2, ] # remove trip start and end points near colony
### estSpaceUse (Produce utilization distributions for each individual) ~~~~~~~~~~~~~~~
h <- HVALS$mag
KDE.Surface <- estSpaceUse(tracks=trips_prj, scale = h, levelUD = 50, polyOut=T)
kde_map <- mapKDE(KDE.Surface$UDPolygons, Show=F)
ud_map <- mapKDE(KDE.Surface$KDE.Surface, Show=F)
n <- length(KDE.Surface$KDE.Surface)
before <- Sys.time()
repr <- repAssess(trips_prj, KDE=KDE.Surface$KDE.Surface, Iteration=1, levelUD=50, avgMethod="mean", nCores = 2)
Sys.time() - before
## 7. ####
### findKBA (Identify areas of significant aggregation) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
popsize <- 500 # pairs or individuals? Oppel et al. 2015
KBA_sf <- findKBA(KDE.Surface$KDE.Surface, represent=repr$out, popSize = popsize, polyOut = T)
KBA_sp <- findKBA(KDE.Surface$KDE.Surface, represent=repr$out, polyOut = F)
mapKBA(KBA_sf, colony = colony)
mapKBA(KBA_sp)
devtools::install_github("BirdLifeInternational/track2kba", dependencies=TRUE) # add argument 'build_vignettes = FALSE' to speed it up
library(track2KBA)
library(track2KBA)
.rs.restartR()
library(track2KBA)
library(track2KBA) # load package
data(boobies)
# ?boobies  # for some background on the data set
dataGroup <- formatFields(
dataGroup = boobies,
fieldID   = "track_id",
fieldDateTime = "date_gmt",
fieldTime = "time_gmt",
fieldLon  = "longitude",
fieldLat  = "latitude"
)
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # kilometers
returnBuff = 10,
duration   = 1,      # hours
plot     = TRUE,   # visualize individual trips
rmNonTrip  = TRUE)
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # kilometers
returnBuff = 10,
duration   = 1,      # hours
rmNonTrip  = TRUE
)
str(dataGroup)
# trips <- tripSplit(
#   dataGroup  = dataGroup,
#   colony     = colony,
#   innerBuff  = 3,      # kilometers
#   returnBuff = 10,
#   duration   = 1,      # hours
#   rmNonTrip  = TRUE
#   )
#
# mapTrips(trips, colony=colony)
library(track2KBA) # load package
data(boobies)
# ?boobies  # for some background on the data set
dataGroup <- formatFields(
dataGroup = boobies,
fieldID   = "track_id",
fieldDateTime = "date_gmt",
fieldTime = "time_gmt",
fieldLon  = "longitude",
fieldLat  = "latitude"
)
library(track2KBA) # load package
data(boobies)
# ?boobies  # for some background on the data set
dataGroup <- formatFields(
dataGroup = boobies,
fieldID   = "track_id",
fieldDateTime = "date_gmt",
fieldTime = "time_gmt",
fieldLon  = "longitude",
fieldLat  = "latitude"
)
str(dataGroup)
library(track2KBA)
library(track2KBA)
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
## 2a. ####
### tripSplit (split tracks in to discrete trips [and optionally filter]) ~~~~~~~~~~~~~
trips <- tripSplit(tracks, colony=colony, innerBuff=2, returnBuff=10, duration=1, nests = F, rmNonTrip = T)
tripmaps <- mapTrips(trips, colony=colony)
## 2b. ####
### tripSummary (summary of trip movements, by individual) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
trips <- subset(trips, trips$Returns == "Yes" )
tripSum <- tripSummary(trips, colony = colony, nests = F)
tripSum
frange <- median(tripSum$max_dist)
frange
c(min(tripSum$max_dist), max(tripSum$max_dist))
fduration <- median(tripSum$duration)
fduration
c(min(tripSum$duration), max(tripSum$duration))
## 3. ####
### project trips to equal-area projection ###
trips_prj <- projectTracks(trips)
## 4. ####
### findScale (get average foraging range, a list of H-value options, and test whether desired grid cell for kernel estimation makes sense given movement scale/tracking resolution) ~~~~~~~~~~~~~~~
HVALS <- findScale(trips_prj,
scaleARS = F,
sumTrips = tripSum
)
HVALS
tracks <- tracks[tracks$ColDist > 3, ] # remove trip start and end points near colony
KDEs <- estSpaceUse(
tracks = tracks,
scale = hVals$mag,
levelUD = 50,
polyOut = TRUE
)
library(dplyr)
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
trips <- tripSplit(tracks, colony=colony, innerBuff=2, returnBuff=10, duration=1, nests = F, rmNonTrip = T)
tripmaps <- mapTrips(trips, colony=colony)
trips <- subset(trips, trips$Returns == "Yes" )
tripSum <- tripSummary(trips, colony = colony, nests = F)
tripSum
frange <- median(tripSum$max_dist)
frange
c(min(tripSum$max_dist), max(tripSum$max_dist))
fduration <- median(tripSum$duration)
fduration
c(min(tripSum$duration), max(tripSum$duration))
trips_prj <- projectTracks(trips)
HVALS <- findScale(trips_prj,
scaleARS = F,
sumTrips = tripSum
)
## 4. ####
trips_prj <- trips_prj[trips_prj$ColDist > 2, ] # remove trip start and end points near colony
## 5. ####
### estSpaceUse (Produce utilization distributions for each individual) ~~~~~~~~~~~~~~~
h <- HVALS$mag
KDE.Surface <- estSpaceUse(tracks=trips_prj, scale = h, levelUD = 50, polyOut=T)
kde_map <- mapKDE(KDE.Surface$UDPolygons, Show=F)
kde_map <- mapKDE(KDE.Surface$UDPolygons, show=F)
tracks <- tracks[tracks$ColDist > 3, ] # remove trip start and end points near colony
debug(estSpaceUse)
KDEs <- estSpaceUse(
tracks = tracks,
scale = hVals$mag,
levelUD = 50,
polyOut = TRUE
)
tracks <- tracks[tracks$ColDist > 3, ] # remove trip start and end points near colony
debug(estSpaceUse)
KDEs <- estSpaceUse(
tracks = tracks,
scale = hVals$mag,
levelUD = 50,
polyOut = TRUE
)
tracks
mapKDE(KDE = KDE, colony = colony)
