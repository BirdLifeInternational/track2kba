w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)    # all peaks
pks
firstpeak <- pks[1] # first peak
firstpeak
maxpeak <- pks[pks %in% which( Temp == max(Temp[pks]) )] # max peak
maxpeak
# steepness around peak
steepness <- sapply(pks, function(i){
s <- sum(diff(x[(i - m) : i]), abs(diff(x[i : (i + m)]))) # steepness around peak
return(s)
})
steeppeak <- pks[which.max(steepness)] # steepest peak
return(pks)
})
pks
# find all peaks for each individual (m is # of pnts either side of peak that has lower or equal value to focal point)
peaks_list <- lapply(out_scales_list, function (x, m = 1){
x <- unlist(out_scales_list[[1]]) # single-row df to vector
# x <- unlist(x) # single-row df to vector
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)    # all peaks
pks
firstpeak <- pks[1] # first peak
firstpeak
maxpeak <- pks[pks %in% which( Temp == max(Temp[pks]) )] # max peak
maxpeak
# steepness around peak
steepness <- sapply(pks, function(i){
s <- sum(diff(x[(i - m) : i]), abs(diff(x[i : (i + m)]))) # steepness around peak
return(s)
})
steeppeak <- pks[which.max(steepness)] # steepest peak
# return(pks)
return(firstpeak)
# return(maxpeak)
# return(steeppeak)
})
firstpeak
pks
peaks_list
# find all peaks for each individual (m is # of pnts either side of peak that has lower or equal value to focal point)
peaks_list <- lapply(out_scales_list, function (x, m = 1){
# x <- unlist(out_scales_list[[1]]) # single-row df to vector
x <- unlist(x) # single-row df to vector
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)    # all peaks
pks
firstpeak <- pks[1] # first peak
firstpeak
maxpeak <- pks[pks %in% which( Temp == max(Temp[pks]) )] # max peak
maxpeak
# steepness around peak
steepness <- sapply(pks, function(i){
s <- sum(diff(x[(i - m) : i]), abs(diff(x[i : (i + m)]))) # steepness around peak
return(s)
})
steeppeak <- pks[which.max(steepness)] # steepest peak
# return(pks)
# return(firstpeak)
return(maxpeak)
# return(steeppeak)
})
peaks_list
unlist(peaks_list)
length(unlist(peaks_list))
length(out_scales_list)
# find all peaks for each individual (m is # of pnts either side of peak that has lower or equal value to focal point)
peaks_list <- lapply(out_scales_list, function (x, m = 1){
# x <- unlist(out_scales_list[[1]]) # single-row df to vector
x <- unlist(x) # single-row df to vector
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)    # all peaks
pks
firstpeak <- pks[1] # first peak
firstpeak
maxpeak <- pks[pks %in% which( Temp == max(Temp[pks]) )] # max peak
maxpeak
# steepness around peak
steepness <- sapply(pks, function(i){
s <- sum(diff(x[(i - m) : i]), abs(diff(x[i : (i + m)]))) # steepness around peak
return(s)
})
steeppeak <- pks[which.max(steepness)] # steepest peak
# return(pks)
# return(firstpeak)
# return(maxpeak)
return(steeppeak)
})
unlist(peaks_list)
ars.scales
lapply(out_scales_list, function (x, m = 1){
# x <- unlist(out_scales_list[[1]]) # single-row df to vector
x <- unlist(x) # single-row df to vector
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)    # all peaks
pks
firstpeak <- pks[1] # first peak
firstpeak
maxpeak <- pks[pks %in% which( Temp == max(Temp[pks]) )] # max peak
maxpeak
# steepness around peak
steepness <- sapply(pks, function(i){
s <- sum(diff(x[(i - m) : i]), abs(diff(x[i : (i + m)]))) # steepness around peak
return(s)
})
steeppeak <- pks[which.max(steepness)] # steepest peak
# return(pks)
# return(firstpeak)
return(maxpeak)
return(steeppeak)
})
pks
?list
list(pks)
list(pks, firstpeak)
xx <- list(pks, firstpeak)
list(xx, xx)
peaks_list <- lapply(out_scales_list, function (x, m = 1){
# x <- unlist(out_scales_list[[1]]) # single-row df to vector
x <- unlist(x) # single-row df to vector
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)    # all peaks
pks
firstpeak <- pks[1] # first peak
firstpeak
maxpeak <- pks[pks %in% which( Temp == max(Temp[pks]) )] # max peak
maxpeak
# steepness around peak
steepness <- sapply(pks, function(i){
s <- sum(diff(x[(i - m) : i]), abs(diff(x[i : (i + m)]))) # steepness around peak
return(s)
})
steeppeak <- pks[which.max(steepness)] # steepest peak
xx <- list(pks, firstpeak)
return(xx)
})
xx
peaks_list
peaks_list[[1]]
list(allpeaks=pks, firstpeak, maxpeak)
pk_list <- list(allpeaks=pks, first=firstpeak, max=maxpeak, steep=steeppeak)
# find all peaks for each individual (m is # of pnts either side of peak that has lower or equal value to focal point)
peaks_list <- lapply(out_scales_list, function (x, m = 1){
# x <- unlist(out_scales_list[[1]]) # single-row df to vector
x <- unlist(x) # single-row df to vector
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)    # all peaks
pks
firstpeak <- pks[1] # first peak
firstpeak
maxpeak <- pks[pks %in% which( Temp == max(Temp[pks]) )] # max peak
maxpeak
# steepness around peak
steepness <- sapply(pks, function(i){
s <- sum(diff(x[(i - m) : i]), abs(diff(x[i : (i + m)]))) # steepness around peak
return(s)
})
steeppeak <- pks[which.max(steepness)] # steepest peak
pk_list <- list(allpeaks=pks, first=firstpeak, max=maxpeak, steep=steeppeak)
return(pk_list)
})
unlist(peaks_list)
str(unlist(peaks_list)()
str(unlist(peaks_list))
peaks_list
# turn rows into list of single row dfs
out_scales_list <- split(out_scales, seq(nrow(out_scales)))
out_scales_list <- setNames(split(out_scales, seq(nrow(out_scales))), rownames(out_scales))
# find all peaks for each individual (m is # of pnts either side of peak that has lower or equal value to focal point)
peaks_list <- lapply(out_scales_list, function (x, m = 1){
# x <- unlist(out_scales_list[[1]]) # single-row df to vector
x <- unlist(x) # single-row df to vector
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)    # all peaks
pks
firstpeak <- pks[1] # first peak
firstpeak
maxpeak <- pks[pks %in% which( Temp == max(Temp[pks]) )] # max peak
maxpeak
# steepness around peak
steepness <- sapply(pks, function(i){
s <- sum(diff(x[(i - m) : i]), abs(diff(x[i : (i + m)]))) # steepness around peak
return(s)
})
steeppeak <- pks[which.max(steepness)] # steepest peak
pk_list <- list(allpeaks=pks, first=firstpeak, max=maxpeak, steep=steeppeak)
return(pk_list)
})
pk_list[[1]]
peaks_list[[1]]
lapply(peaks_list, "[")
lapply(peaks_list, "[[")
lapply(peaks_list, function(x) lapply(x, "["))
lapply(peaks_list, function(x) lapply(x, "[["))
lapply(peaks_list, "[[", 2 )
lapply(peaks_list, "[[", "first" )
lapply(peaks_list, "[[", "max" )
lapply(peaks_list, "[[", "steepest" )
lapply(peaks_list, "[[", "steep" )
unlist(  lapply(peaks_list, "[[", "steep" )
)
findPeak <- "steep"
unlist(  lapply(peaks_list, "[[", findPeak )
unlist(  lapply(peaks_list, "[[", findPeak ) )
cyclocomp_q(  peaks_list <- lapply(out_scales_list, function (x, m = peakWidth){
# x <- unlist(out_scales_list[[1]]) # single-row df to vector
x <- unlist(x) # single-row df to vector
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
# steepness around peak
steepness <- sapply(pks, function(i){
s <- sum(diff(x[(i - m) : i]), abs(diff(x[i : (i + m)]))) # steepness around peak
return(s)
})
pks <- unlist(pks)    # all peaks
firstpeak <- pks[1]   # first peak
maxpeak <- pks[pks %in% which( Temp == max(Temp[pks]) )] # max peak
steeppeak <- pks[which.max(steepness)] # steepest peak
pk_list <- list(allpeaks=pks, first=firstpeak, max=maxpeak, steep=steeppeak)
return(pk_list)
}))
cyclocomp_q(  ars.scales <- unlist( lapply(peaks_list, "[[", findPeak) )
)
# select only peak type chosen by fxn argument findPeak
ars.scales <- unlist( lapply(peaks_list, "[[", findPeak) )
AprScale <- round(median(ars.scales), 2)
AprScale
ars.scales
findPeak <- "first"
# turn rows into list of single row dfs
out_scales_list <- split(out_scales, seq(nrow(out_scales)))
out_scales_list <- setNames(split(out_scales, seq(nrow(out_scales))), rownames(out_scales))
# find all peaks for each individual (m is # of pnts either side of peak that has lower or equal value to focal point)
peaks_list <- lapply(out_scales_list, function (x, m = peakWidth){
# x <- unlist(out_scales_list[[1]]) # single-row df to vector
x <- unlist(x) # single-row df to vector
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
# steepness around peak
steepness <- sapply(pks, function(i){
s <- sum(diff(x[(i - m) : i]), abs(diff(x[i : (i + m)]))) # steepness around peak
return(s)
})
pks       <- unlist(pks)    # all peaks
firstpeak <- pks[1]         # first peak
maxpeak   <- pks[pks %in% which( Temp == suppressWarnings(max(Temp[pks])) )] # max peak
steeppeak <- pks[which.max(steepness)] # steepest peak
pk_list <- list(allpeaks=pks, first=firstpeak, max=maxpeak, steep=steeppeak)
return(pk_list)
})
# select only peak type chosen by fxn argument findPeak
ars.scales <- unlist( lapply(peaks_list, "[[", findPeak) )
peakWidth <- 1 # how many points either side of a point to define a peak
findPeak <- "first"
# turn rows into list of single row dfs
out_scales_list <- split(out_scales, seq(nrow(out_scales)))
out_scales_list <- setNames(split(out_scales, seq(nrow(out_scales))), rownames(out_scales))
# find all peaks for each individual (m is # of pnts either side of peak that has lower or equal value to focal point)
peaks_list <- lapply(out_scales_list, function (x, m = peakWidth){
# x <- unlist(out_scales_list[[1]]) # single-row df to vector
x <- unlist(x) # single-row df to vector
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
# steepness around peak
steepness <- sapply(pks, function(i){
s <- sum(diff(x[(i - m) : i]), abs(diff(x[i : (i + m)]))) # steepness around peak
return(s)
})
pks       <- unlist(pks)    # all peaks
firstpeak <- pks[1]         # first peak
maxpeak   <- pks[pks %in% which( Temp == suppressWarnings(max(Temp[pks])) )] # max peak
steeppeak <- pks[which.max(steepness)] # steepest peak
pk_list <- list(allpeaks=pks, first=firstpeak, max=maxpeak, steep=steeppeak)
return(pk_list)
})
# select only peak type chosen by fxn argument findPeak
ars.scales <- unlist( lapply(peaks_list, "[[", findPeak) )
AprScale <- round(median(ars.scales), 2)
AprScale
ars.scales
pks
firstpeak
maxpeak
peaks_list
ars.scales
peaks_list[`69332`]
peaks_list$69332
peaks_list$`69332`
peaks_list$`69332`[[1]]
peaks_list$`69332`$allpeaks
unlist( lapply(peaks_list, function(x) x$findPeak) )
unlist( lapply(peaks_list, function(x) x[[1]]) )
unlist( lapply(peaks_list, function(x) x[[findPeak]]) )
unlist( lapply(peaks_list, function(x)
{
ifelse( is.null(x[[findPeak]]), message("POOP"), return(x[[findPeak]]) )
}))
unlist( lapply(peaks_list, function(x)
{
if( is.null(x[[findPeak]]) ) { message("POOP") } else { return(x[[findPeak]]) }
}))
unlist( lapply(peaks_list, function(x)
{
if( is.null(x[[findPeak]]) ) { message(paste(names(x), " is POOP")) } else { return(x[[findPeak]]) }
}))
names(peaks_list)
names(peaks_list$`69302`)
peaks_list[[1]]
names(peaks_list)
unlist( lapply(peaks_list, function(x, n) {
if( is.null(x[[findPeak]]) ) { message(paste(n, " is POOP")) } else { return(x[[findPeak]]) }
}, n=names(peaks_list)))
seq_along(peaks_list)
unlist( lapply(seq_along(peaks_list), function(i) {paste(names(peaks_list[[i]]), "POOP")} ))
unlist( lapply(seq_along(peaks_list), function(i) {paste(names(peaks_list)[[i]], "POOP")} ))
unlist( lapply(seq_along(peaks_list), function(x, i) {paste(names(peaks_list)[[i]], "POOP", names(x)[1])} ))
unlist( lapply(seq_along(peaks_list), function(x, i) {paste(names(peaks_list)[[i]], "POOP", names(x)[[1]])} ))
unlist( lapply(seq_along(peaks_list), function(x, i) {paste(names(peaks_list)[[i]], "POOP", names(x))} ))
names(peaks_list)
peaks_list[[1]][[findPeak]])
peaks_list[[1]][[findPeak]]
unlist( lapply(seq_along(peaks_list), function(i, n) {
if( is.null(peaks_list[[i]][[findPeak]]) ) { message(paste(n[[i]], " is POOP")) } else { return(peaks_list[[i]][[findPeak]]) }
}, n=names(peaks_list)))
peakWidth <- 1 # how many points either side of a point to define a peak
findPeak <- "first"
# turn rows into list of single row dfs
out_scales_list <- split(out_scales, seq(nrow(out_scales)))
out_scales_list <- setNames(split(out_scales, seq(nrow(out_scales))), rownames(out_scales))
# find all peaks for each individual (m is # of pnts either side of peak that has lower or equal value to focal point)
pks_list <- lapply(out_scales_list, function (x, m = peakWidth){
# x <- unlist(out_scales_list[[1]]) # single-row df to vector
x <- unlist(x) # single-row df to vector
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
# steepness around peak
steepness <- sapply(pks, function(i){
s <- sum(diff(x[(i - m) : i]), abs(diff(x[i : (i + m)]))) # steepness around peak
return(s)
})
pks       <- unlist(pks)    # all peaks
firstpeak <- pks[1]         # first peak
maxpeak   <- pks[pks %in% which( Temp == suppressWarnings(max(Temp[pks])) )] # max peak
steeppeak <- pks[which.max(steepness)] # steepest peak
pk_list <- list(allpeaks=pks, first=firstpeak, max=maxpeak, steep=steeppeak)
return(pk_list)
})
unlist( lapply(seq_along(pks_list), function(i, n) {
if( is.null(pks_list[[i]][[findPeak]]) ) { message("no peak found for:", paste(n[[i]])) } else { return(pks_list[[i]][[findPeak]]) }
}, n=names(pks_list)))
# select only peak type chosen by fxn argument findPeak
ars.scales <- unlist( lapply(pks_list, "[[", findPeak) )
unlist( lapply(seq_along(pks_list), function(i, n) {
if( is.null(pks_list[[i]][[findPeak]]) ) { message("no peak found for ID ", n[[i]]) } else { return(pks_list[[i]][[findPeak]]) }
}, n=names(pks_list)))
ars.scales <- unlist( lapply(seq_along(pks_list), function(i, n=names(pks_list)) {
if( is.null(pks_list[[i]][[findPeak]]) ) {
message("no peak found for ID ", n[[i]]) }
else { return(pks_list[[i]][[findPeak]]) }
})
)
ars.scales
peakWidth <- 1 # how many points either side of a point to define a peak
findPeak <- "allpeaks"
# turn rows into list of single row dfs
out_scales_list <- split(out_scales, seq(nrow(out_scales)))
out_scales_list <- setNames(split(out_scales, seq(nrow(out_scales))), rownames(out_scales))
# find all peaks for each individual (m is # of pnts either side of peak that has lower or equal value to focal point)
pks_list <- lapply(out_scales_list, function (x, m = peakWidth){
# x <- unlist(out_scales_list[[1]]) # single-row df to vector
x <- unlist(x) # single-row df to vector
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
# steepness around peak
steepness <- sapply(pks, function(i){
s <- sum(diff(x[(i - m) : i]), abs(diff(x[i : (i + m)]))) # steepness around peak
return(s)
})
pks       <- unlist(pks)    # all peaks
firstpeak <- pks[1]         # first peak
maxpeak   <- pks[pks %in% which( Temp == suppressWarnings(max(Temp[pks])) )] # max peak
steeppeak <- pks[which.max(steepness)] # steepest peak
pk_list <- list(allpeaks=pks, first=firstpeak, max=maxpeak, steep=steeppeak)
return(pk_list)
})
# select only peak type chosen by fxn argument findPeak
ars.scales <- unlist( lapply( seq_along(pks_list), function(i, n=names(pks_list)) {
if( is.null(pks_list[[i]][[findPeak]]) ) {
message( "no peak found for ID ", n[[i]] ) }
else { return(pks_list[[i]][[findPeak]]) }
}
) )
ars.scales
peakWidth <- 2 # how many points either side of a point to define a peak
findPeak <- "first"
# turn rows into list of single row dfs
out_scales_list <- split(out_scales, seq(nrow(out_scales)))
out_scales_list <- setNames(split(out_scales, seq(nrow(out_scales))), rownames(out_scales))
# find all peaks for each individual (m is # of pnts either side of peak that has lower or equal value to focal point)
pks_list <- lapply(out_scales_list, function (x, m = peakWidth){
# x <- unlist(out_scales_list[[1]]) # single-row df to vector
x <- unlist(x) # single-row df to vector
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
# steepness around peak
steepness <- sapply(pks, function(i){
s <- sum(diff(x[(i - m) : i]), abs(diff(x[i : (i + m)]))) # steepness around peak
return(s)
})
pks       <- unlist(pks)    # all peaks
firstpeak <- pks[1]         # first peak
maxpeak   <- pks[pks %in% which( Temp == suppressWarnings(max(Temp[pks])) )] # max peak
steeppeak <- pks[which.max(steepness)] # steepest peak
pk_list <- list(allpeaks=pks, first=firstpeak, max=maxpeak, steep=steeppeak)
return(pk_list)
})
# select only peak type chosen by fxn argument findPeak
ars.scales <- unlist( lapply( seq_along(pks_list), function(i, n=names(pks_list)) {
if( is.null(pks_list[[i]][[findPeak]]) ) {
message( "no peak found for ID ", n[[i]] ) }
else { return(pks_list[[i]][[findPeak]]) }
}
) )
