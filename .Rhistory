Track$Returns <- ""
Track$trip_id <- 0
Track$ColDist <- spDistsN1(Track, Colony.Projected)
Trip.Sequence <- 0
Time.Diff <- 0
Max.Dist <- 0
ReturnBuff <- ReturnBuff * 1000   ### convert from km into UTM units (m)
InnerBuff <- InnerBuff * 1000   ### convert from km into UTM units (m)
Colony.Projected
### SPLIT THE DATA INTO DISCRETE TRIPS ###
i <- 0
while(i < nrow(Track))
{
i <- i + 1
if(Track$ColDist[i] < InnerBuff) {Track$trip_id[i] <- -1} else {
k <- i
if(i == nrow(Track)) {Track$trip_id[i] <- -1; break}      ### need to look at how these breaks affect the DataGroup loop
Dist <- Track$ColDist[i]
while(Dist >= InnerBuff)
{
if(k == nrow(Track) & Dist < ReturnBuff) {break} else {
if(k == nrow(Track))
{
print(paste("track ", Track$ID[1], Trip.Sequence + 1, " does not return to the colony", sep=""))
Track$Returns[i:k] <- "N" ; break
}
}
k <- k + 1
#if(plotit == TRUE){points(Track[k,], col=2, pch=16, cex=0.5)}
Dist <- Track$ColDist[k]
}
Time.Diff <- (Track$TrackTime[k] - Track$TrackTime[i]) / 3600
Max.Dist <- max(Track$ColDist[i:k])
if(Time.Diff < Duration |  Max.Dist < InnerBuff)
{
Track$trip_id[i:k] <- -1;
i <- k;
print(paste("trip ", Track$ID[1], Trip.Sequence + 1, " is too small a trip"))
next
}
Trip.Sequence <- Trip.Sequence + 1
Track$trip_id[i:k] <- paste(Track$ID[1], Trip.Sequence, sep="")
i <- k
print(paste(Track$ID[1], Trip.Sequence, sep=""))
}
}
Track
InnerBuff
source("tripSplit.r")
Trips<-tripSplit(tracks, Colony=Colony, InnerBuff=20, ReturnBuff=50, Duration=5, plotit=T, nests = F)
Trips
trip_distances <- tripSummary(Trips, Colony = Colony, nests = F)
trip_distances
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LOAD PACKAGES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(maptools)
require(geosphere)
require(sp)
library(rgdal)
library(tidyverse)
library(data.table)
library(maps)
library(rgeos)
library(adehabitatHR)
library(lubridate)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LOAD OUR track2iba FUNCTIONS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
setwd("C:\\STEFFEN\\track2iba")
#setwd("C:/Users/Martim Bill/Documents/track2iba")
# source("tripSplit.r")
# source("tripSummary.r")
# source("scaleARS.r")
# source("bootstrap.r")
# source("batchUD.r")
# source("varianceTest.r")
#source("findIBA.r")
tracks <- fread("example_data/Dataset_1004_2019-03-01.csv")     ## MUPE
# tracks <- fread("example_data/Dataset_1012_2019-03-01.csv")     ## MABO St Helena
# tracks <- fread("example_data/Dataset_1151_2019-03-01.csv")     ## SHAG
# tracks <- fread("example_data/Dataset_1245_2019-03-01.csv")       ## RAZO
# tracks <- fread("example_data/R56Data.csv")       ## Luke Halpin dateline crossing data set
### CREATE COLONY DATA FRAME
Colony<- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
rename(Longitude=lon_colony,Latitude=lat_colony)
### Convert Dates and Times
tracks <- tracks %>%
mutate(DateTime = ymd_hms(paste(date_gmt,time_gmt, sep = " "))) %>%
mutate(TrackTime = as.double(DateTime)) %>%
dplyr::select(track_id, latitude, longitude,DateTime, TrackTime) %>%
rename(ID=track_id,Latitude=latitude,Longitude=longitude)
head(tracks)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# DEFINE PROJECTIONS [no longer needed - done within tripSplit]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# proj.UTM <- CRS(paste("+proj=laea +lon_0=", mean(tracks$Longitude), " +lat_0=", mean(tracks$Latitude), sep=""))
# DataGroup <- SpatialPointsDataFrame(SpatialPoints(data.frame(tracks$Longitude, tracks$Latitude), proj4string=CRS("+proj=longlat + datum=wgs84")), data = tracks, match.ID=F)
# DataGroup.Projected <- spTransform(DataGroup, CRS=proj.UTM)
# plot(DataGroup)
# points(x=Colony$Longitude,y=Colony$Latitude,type="p",pch=16, col='red')
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# RUN tripSplit FUNCTION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
str(tracks)
source("tripSplit.r")
Trips<-tripSplit(tracks, Colony=Colony, InnerBuff=20, ReturnBuff=50, Duration=5, plotit=T, nests = F)
dim(Trips)
tracks <- fread("example_data/Dataset_1245_2019-03-01.csv")       ## RAZO
# tracks <- fread("example_data/R56Data.csv")       ## Luke Halpin dateline crossing data set
### CREATE COLONY DATA FRAME
Colony<- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
rename(Longitude=lon_colony,Latitude=lat_colony)
### Convert Dates and Times
tracks <- tracks %>%
mutate(DateTime = ymd_hms(paste(date_gmt,time_gmt, sep = " "))) %>%
mutate(TrackTime = as.double(DateTime)) %>%
dplyr::select(track_id, latitude, longitude,DateTime, TrackTime) %>%
rename(ID=track_id,Latitude=latitude,Longitude=longitude)
head(tracks)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# DEFINE PROJECTIONS [no longer needed - done within tripSplit]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# proj.UTM <- CRS(paste("+proj=laea +lon_0=", mean(tracks$Longitude), " +lat_0=", mean(tracks$Latitude), sep=""))
# DataGroup <- SpatialPointsDataFrame(SpatialPoints(data.frame(tracks$Longitude, tracks$Latitude), proj4string=CRS("+proj=longlat + datum=wgs84")), data = tracks, match.ID=F)
# DataGroup.Projected <- spTransform(DataGroup, CRS=proj.UTM)
# plot(DataGroup)
# points(x=Colony$Longitude,y=Colony$Latitude,type="p",pch=16, col='red')
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# RUN tripSplit FUNCTION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
str(tracks)
source("tripSplit.r")
Trips<-tripSplit(tracks, Colony=Colony, InnerBuff=20, ReturnBuff=50, Duration=5, plotit=T, nests = F)
dim(Trips)
tracks <- fread("example_data/Dataset_1012_2019-03-01.csv")     ## MABO St Helena
# tracks <- fread("example_data/Dataset_1151_2019-03-01.csv")     ## SHAG
# tracks <- fread("example_data/Dataset_1245_2019-03-01.csv")       ## RAZO
# tracks <- fread("example_data/R56Data.csv")       ## Luke Halpin dateline crossing data set
### CREATE COLONY DATA FRAME
Colony<- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
rename(Longitude=lon_colony,Latitude=lat_colony)
### Convert Dates and Times
tracks <- tracks %>%
mutate(DateTime = ymd_hms(paste(date_gmt,time_gmt, sep = " "))) %>%
mutate(TrackTime = as.double(DateTime)) %>%
dplyr::select(track_id, latitude, longitude,DateTime, TrackTime) %>%
rename(ID=track_id,Latitude=latitude,Longitude=longitude)
head(tracks)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# DEFINE PROJECTIONS [no longer needed - done within tripSplit]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# proj.UTM <- CRS(paste("+proj=laea +lon_0=", mean(tracks$Longitude), " +lat_0=", mean(tracks$Latitude), sep=""))
# DataGroup <- SpatialPointsDataFrame(SpatialPoints(data.frame(tracks$Longitude, tracks$Latitude), proj4string=CRS("+proj=longlat + datum=wgs84")), data = tracks, match.ID=F)
# DataGroup.Projected <- spTransform(DataGroup, CRS=proj.UTM)
# plot(DataGroup)
# points(x=Colony$Longitude,y=Colony$Latitude,type="p",pch=16, col='red')
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# RUN tripSplit FUNCTION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
str(tracks)
source("tripSplit.r")
Trips<-tripSplit(tracks, Colony=Colony, InnerBuff=20, ReturnBuff=50, Duration=5, plotit=T, nests = F)
dim(Trips)
### full analysis for package development
### started by steffen oppel on 1 March 2019
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LOAD PACKAGES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(maptools)
require(geosphere)
require(sp)
library(rgdal)
library(tidyverse)
library(data.table)
library(maps)
library(rgeos)
library(adehabitatHR)
library(lubridate)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LOAD OUR track2iba FUNCTIONS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
setwd("C:\\STEFFEN\\track2iba")
#setwd("C:/Users/Martim Bill/Documents/track2iba")
# source("tripSplit.r")
# source("tripSummary.r")
# source("scaleARS.r")
# source("bootstrap.r")
# source("batchUD.r")
# source("varianceTest.r")
#source("findIBA.r")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LOAD AND PREPARE SAMPLE DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# tracks <- fread("example_data/Dataset_1004_2019-03-01.csv")     ## MUPE
# tracks <- fread("example_data/Dataset_1012_2019-03-01.csv")     ## MABO St Helena
# tracks <- fread("example_data/Dataset_1151_2019-03-01.csv")     ## SHAG
# tracks <- fread("example_data/Dataset_1245_2019-03-01.csv")       ## RAZO
# tracks <- fread("example_data/R56Data.csv")       ## Luke Halpin dateline crossing data set
### CREATE COLONY DATA FRAME
Colony<- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
rename(Longitude=lon_colony,Latitude=lat_colony)
### Convert Dates and Times
tracks <- tracks %>%
mutate(DateTime = ymd_hms(paste(date_gmt,time_gmt, sep = " "))) %>%
mutate(TrackTime = as.double(DateTime)) %>%
dplyr::select(track_id, latitude, longitude,DateTime, TrackTime) %>%
rename(ID=track_id,Latitude=latitude,Longitude=longitude)
head(tracks)
tracks <- fread("example_data/Dataset_1245_2019-03-01.csv")       ## RAZO
# tracks <- fread("example_data/R56Data.csv")       ## Luke Halpin dateline crossing data set
### CREATE COLONY DATA FRAME
Colony<- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
rename(Longitude=lon_colony,Latitude=lat_colony)
### Convert Dates and Times
tracks <- tracks %>%
mutate(DateTime = ymd_hms(paste(date_gmt,time_gmt, sep = " "))) %>%
mutate(TrackTime = as.double(DateTime)) %>%
dplyr::select(track_id, latitude, longitude,DateTime, TrackTime) %>%
rename(ID=track_id,Latitude=latitude,Longitude=longitude)
head(tracks)
str(tracks)
source("tripSplit.r")
Trips<-tripSplit(tracks, Colony=Colony, InnerBuff=20, ReturnBuff=50, Duration=5, plotit=T, nests = F)
dim(Trips)
?centroid
?spDistsN1
?map2_dbl
pkgs <-c('move', 'tidyverse', 'lubridate')
for(p in pkgs) {suppressPackageStartupMessages(require(p, quietly=TRUE, character.only=TRUE,warn.conflicts=FALSE))}
pkgs <-c('move', 'tidyverse', 'lubridate','data.table')
for(p in pkgs) {suppressPackageStartupMessages(require(p, quietly=TRUE, character.only=TRUE,warn.conflicts=FALSE))}
Username="Steffen"
Password="Fr1gateb1rd30"
MovebankID="67228644"
User="Steffen"
Password="Fr1gateb1rd30"
MovebankID="67228644"
User="Steffen"
Password="Fr1gateb1rd30"
MovebankID="67228644"
loginStored <- movebankLogin(username=User, password=Password)
input <- getMovebankData(MovebankID, loginStored)
?getMovebankData
User="Steffen"
Password="Fr1gateb1rd30"
MovebankID=67228644
loginStored <- movebankLogin(username=User, password=Password)
input <- getMovebankData(study=MovebankID, login=loginStored)
User="Steffen"
Password="Fr1gateb1rd30"
MovebankID=108322181
loginStored <- movebankLogin(username=User, password=Password)
input <- getMovebankData(study=MovebankID, login=loginStored)
head(input)
filename="example_data/MovebankExampleData.csv"
?getMovebank
deploy <- getMovebankData(entity_type="deployments",study_id=MovebankID, login=loginStored)
loginStored <- movebankLogin(username=User, password=Password)
deploy <- getMovebankData(entity_type="deployments", login=loginStored,study_id=MovebankID)
deploy <- getMovebank(entity_type="deployments", login=loginStored,study_id=MovebankID)
tracks <- input %>% dplyr::select(deployment_id,timestamp,location_lat,location_long) %>%
rename(ID=deployment_id,DateTime=timestamp,Latitude=location_lat,Longitude=location_long)
head(tracks)
tracks <- input@data %>% dplyr::select(deployment_id,timestamp,location_lat,location_long) %>%
rename(ID=deployment_id,DateTime=timestamp,Latitude=location_lat,Longitude=location_long)
head(tracks)
User="Steffen"
Password="Fr1gateb1rd30"
MovebankID=10604741
loginStored <- movebankLogin(username=User, password=Password)
input <- getMovebankData(study=MovebankID, login=loginStored)
try(deploy <- getMovebank(entity_type="deployments", login=loginStored,study_id=MovebankID), silent=T)
deploy
User="Steffen"
Password="Fr1gateb1rd30"
MovebankID=114336340
loginStored <- movebankLogin(username=User, password=Password)
input <- getMovebankData(study=MovebankID, login=loginStored)
try(deploy <- getMovebank(entity_type="deployments", login=loginStored,study_id=MovebankID), silent=T)
deploy
getMovebank(entity_type="deployments", login=loginStored,study_id=MovebankID)
filename="example_data/MovebankExampleData.csv"
input <- fread(filename)
head(input)
source("move2kba.r")
source("move2kba.r")
filename="example_data/MovebankExampleData.csv"
tracks<-move2kba(filename)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LOAD PACKAGES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#library(maptools)
#require(geosphere)
#require(sp)
#library(rgdal)
library(tidyverse)
library(data.table)
#library(maps)
#library(rgeos)
#library(adehabitatHR)
library(lubridate)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LOAD OUR track2iba FUNCTIONS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
setwd("C:\\STEFFEN\\track2iba")
#setwd("C:/Users/Martim Bill/Documents/track2iba")
# source("tripSplit.r")
# source("tripSummary.r")
# source("scaleARS.r")
# source("bootstrap.r")
# source("batchUD.r")
# source("varianceTest.r")
#source("findIBA.r")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LOAD AND PREPARE SAMPLE DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# tracks <- fread("example_data/Dataset_1004_2019-03-01.csv")     ## MUPE
# tracks <- fread("example_data/Dataset_1012_2019-03-01.csv")     ## MABO St Helena
# tracks <- fread("example_data/Dataset_1151_2019-03-01.csv")     ## SHAG
tracks <- fread("example_data/Dataset_1245_2019-03-01.csv")       ## RAZO
# tracks <- fread("example_data/R56Data.csv")       ## Luke Halpin dateline crossing data set
### CREATE COLONY DATA FRAME
Colony<- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
rename(Longitude=lon_colony,Latitude=lat_colony)
### Convert Dates and Times
tracks <- tracks %>%
mutate(DateTime = ymd_hms(paste(date_gmt,time_gmt, sep = " "))) %>%
mutate(TrackTime = as.double(DateTime)) %>%
dplyr::select(track_id, latitude, longitude,DateTime, TrackTime) %>%
rename(ID=track_id,Latitude=latitude,Longitude=longitude)
head(tracks)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LOAD AND PREPARE SAMPLE DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# tracks <- fread("example_data/Dataset_1004_2019-03-01.csv")     ## MUPE
# tracks <- fread("example_data/Dataset_1012_2019-03-01.csv")     ## MABO St Helena
# tracks <- fread("example_data/Dataset_1151_2019-03-01.csv")     ## SHAG
tracks <- fread("example_data/Dataset_1245_2019-03-01.csv")       ## RAZO
# tracks <- fread("example_data/R56Data.csv")       ## Luke Halpin dateline crossing data set
### CREATE COLONY DATA FRAME
Colony<- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
rename(Longitude=lon_colony,Latitude=lat_colony)
### Convert Dates and Times
tracks <- tracks %>%
mutate(DateTime = ymd_hms(paste(date_gmt,time_gmt, sep = " "))) %>%
#mutate(TrackTime = as.double(DateTime)) %>%
dplyr::select(track_id, latitude, longitude,DateTime, TrackTime) %>%
rename(ID=track_id,Latitude=latitude,Longitude=longitude)
head(tracks)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# IMPORT DATA FROM MOVEBANK
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source("move2kba.r")
User="Steffen"
Password=XXXXXXXXX
MovebankID=114336340
filename="example_data/MovebankExampleData.csv"
tracks<-move2kba(filename)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# DEFINE PROJECTIONS [no longer needed - done within tripSplit]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# proj.UTM <- CRS(paste("+proj=laea +lon_0=", mean(tracks$Longitude), " +lat_0=", mean(tracks$Latitude), sep=""))
# DataGroup <- SpatialPointsDataFrame(SpatialPoints(data.frame(tracks$Longitude, tracks$Latitude), proj4string=CRS("+proj=longlat + datum=wgs84")), data = tracks, match.ID=F)
# DataGroup.Projected <- spTransform(DataGroup, CRS=proj.UTM)
# plot(DataGroup)
# points(x=Colony$Longitude,y=Colony$Latitude,type="p",pch=16, col='red')
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# RUN tripSplit FUNCTION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
str(tracks)
source("tripSplit.r")
Trips<-tripSplit(tracks, Colony=Colony, InnerBuff=20, ReturnBuff=50, Duration=5, plotit=T, nests = F)
dim(Trips)
Trips <- Trips[Trips$trip_id != "-1",]
# Trips <- Trips[!Trips$trip_id %in% names(which(table(Trips$trip_id) < 5)), ] # remove trips with less than 5 points
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# RUN tripSummary FUNCTION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source("tripSummary.r")
trip_distances <- tripSummary(Trips, Colony = Colony, nests = F)
trip_distances
dim(trip_distances)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# RUN scaleARS FUNCTION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#ScaleOut <- scaleARS(Trips, Scales = c(seq(0, 250, 0.5)), Peak="Flexible")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LOAD AND PREPARE SAMPLE DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# tracks <- fread("example_data/Dataset_1004_2019-03-01.csv")     ## MUPE
# tracks <- fread("example_data/Dataset_1012_2019-03-01.csv")     ## MABO St Helena
# tracks <- fread("example_data/Dataset_1151_2019-03-01.csv")     ## SHAG
tracks <- fread("example_data/Dataset_1245_2019-03-01.csv")       ## RAZO
# tracks <- fread("example_data/R56Data.csv")       ## Luke Halpin dateline crossing data set
### CREATE COLONY DATA FRAME
Colony<- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
rename(Longitude=lon_colony,Latitude=lat_colony)
### Convert Dates and Times
tracks <- tracks %>%
mutate(DateTime = ymd_hms(paste(date_gmt,time_gmt, sep = " "))) %>%
#mutate(TrackTime = as.double(DateTime)) %>%
dplyr::select(track_id, latitude, longitude,DateTime) %>%
rename(ID=track_id,Latitude=latitude,Longitude=longitude)
head(tracks)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# RUN tripSplit FUNCTION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
str(tracks)
source("tripSplit.r")
Trips<-tripSplit(tracks, Colony=Colony, InnerBuff=20, ReturnBuff=50, Duration=5, plotit=T, nests = F)
dim(Trips)
?spRbind
??spRbind
str(tracks)
source("tripSplit.r")
Trips<-tripSplit(tracks, Colony=Colony, InnerBuff=20, ReturnBuff=50, Duration=5, plotit=T, nests = F)
dim(Trips)
Trips <- Trips[Trips$trip_id != "-1",]
# Trips <- Trips[!Trips$trip_id %in% names(which(table(Trips$trip_id) < 5)), ] # remove trips with less than 5 points
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# RUN tripSummary FUNCTION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source("tripSummary.r")
trip_distances <- tripSummary(Trips, Colony = Colony, nests = F)
trip_distances
dim(trip_distances)
source("batchUD_clean.r")
KDE.Surface <- batchUD(Trips[Trips$trip_id != "-1",], Scale = 10, Res=10, UDLev = UD, polyOut=F)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# RUN THE findIBA FUNCTION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source("findIBA_clean.r")
IBAs <- findIBA(KDE.Surface, representativity=0.64,Col.size = 500)
representativity=0.8
Col.size = NA
UDLev=50
plotit=TRUE
#### LOAD PACKAGES ####
# require(adehabitatHR)
# require(raster)
# require(sp)
# require(sf)
# require(smoothr)
# require(rnaturalearth)
pkgs <-c('sp', 'sf','smoothr','raster','rnaturalearth','raster','tidyverse', 'geosphere', 'adehabitatHR')
for(p in pkgs) {suppressPackageStartupMessages(require(p, quietly=TRUE, character.only=TRUE,warn.conflicts=FALSE))}
#### ERROR CHECKING ####
if(class(KDE.Surface) %in% c("list")) {KDE.Surface<=KDE.Surface$KDE.Surface}  ### for users who specified polyOut=T in the batchUD function
if(!class(KDE.Surface) %in% c("estUDm")) stop("KDE.Surface should be of class 'estUDm' provided by adehabitatHR::kernelUD or track2iba::batchUD")
if(length(KDE.Surface)<10) warning("LOW SAMPLE SIZE: identifying an IBA based on <10 tracked individuals is not recommended")
#### CALCULATING THRESHOLD OF PROP OF TRACKED ANIMALS NEEDED FROM LASCELLES ET AL. 2016 ####
#threshlkup<-data.frame(rep=c(0.9,0.8,0.7),thresh=c(10,12.5,20),corr=c(0.9,0.75,0.5))
if (representativity<0.7) warning("UNREPRESENTATIVE SAMPLE: you either did not track a sufficient number of birds to characterise the colony's space use or your species does not lend itself to IBA identification due to its dispersed movement")
thresh<-ifelse(representativity<=0.7,length(KDE.Surface)*0.5,
ifelse(representativity<0.8,length(KDE.Surface)*0.2,
ifelse(representativity<0.7,length(KDE.Surface)*0.125,length(KDE.Surface)*0.1)))
corr<-ifelse(representativity<=0.7,0.25,
ifelse(representativity<0.8,0.5,
ifelse(representativity<0.7,0.75,0.9)))
### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ###
#### COUNT THE NUMBER OF OVERLAPPING UD KERNELS ABOVE THE UDLev==50
### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ###
## create SpatialPixelsDataFrame
#UDLev=50
KDEpix<-estUDm2spixdf(KDE.Surface)
if(is.projected(KDEpix)!=TRUE) stop("Please re-calculate your kernel UD after projecting the data into a coordinate reference system where units are identical on x- and y-axis")
## find the sum of area usage for each individual to calculate what 50% is
thresholdUD<-KDEpix@data %>% gather(key="ID",value="UD") %>%
group_by(ID) %>%
summarise(thresh=(sum(UD)*(UDLev/100))/nrow(KDEpix@data))
## convert to a 0/1 pixel depending on whether UDLev=50 was exceeded
Noverlaps<-KDEpix
Noverlaps@data<-Noverlaps@data %>%
mutate(rowname=1:nrow(KDEpix@data)) %>%
gather(key="ID",value="UD",-rowname) %>%
left_join(thresholdUD, by="ID") %>%
mutate(value=ifelse(UD<thresh,0,1)) %>%
group_by(rowname) %>%
summarise(N_IND=sum(value)) %>%   ### change that to max for bootstrap function
dplyr::select(N_IND)
## CONVERT TO POTENTIAL IBA BASED ON THRESHOLDS
potentialIBA<-Noverlaps
potentialIBA@data<-potentialIBA@data %>%
mutate(IBA = ifelse(N_IND>= thresh,"potential","no"))
if(!is.na(Col.size)){potentialIBA@data$N_birds<- corr*Col.size*(potentialIBA@data$N_IND/length(KDE.Surface))}else{   ## provide the number of ind expected if colony size is given
potentialIBA@data$N_birds<- corr*100*(potentialIBA@data$N_IND/length(KDE.Surface))
warning("No value for colony size provided. Output for N_birds is in % of colony size")}   ## if no colony size is given then provide output in percent
### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ###
#### CONVERT OUTPUT INTO POLYGONS WITH IBA ASSESSMENT INFO
### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ###
### the first step is very slow
IBApoly <- as(potentialIBA, "SpatialPolygonsDataFrame")
IBApoly <- subset(IBApoly, IBA=="potential")
### aggregate all pixel-sized polygons into big polygons with the same number of birds
OUTMAP <- aggregate(IBApoly, c('N_birds','N_IND','IBA'))
dim(OUTMAP@data)
### CONVERT INTO SIMPLE FEATURE AS OUTPUT AND FOR PLOTTING
IBA_sf <- st_as_sf(OUTMAP) %>%
st_union(by_feature=T) %>%
smoothr::smooth(method = "densify") %>%
#drop_crumbs(threshold = units::set_units(100, km^2)) %>%
#fill_holes(threshold = units::set_units(100, km^2)) %>%
st_transform(4326)
?as
str(potentialIBA)
### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ###
#### CONVERT OUTPUT INTO POLYGONS WITH IBA ASSESSMENT INFO
### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ###
### the first step is very slow
IBApoly <- methods::as(potentialIBA, "SpatialPolygonsDataFrame") ## this gives a warning that needs to be sorted
IBApoly <- SpatialPolygonsDataFrame(potentialIBA)
