library(track2KBA)
library(dplyr)
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
## 2a. ####
### tripSplit (split tracks in to discrete trips [and optionally filter]) ~~~~~~~~~~~~~
trips <- tripSplit(tracks, colony=colony, innerBuff=2, returnBuff=10, duration=1, nests = F, rmNonTrip = T)
tripmaps <- mapTrips(trips, colony=colony)
trips <- subset(trips, trips$Returns == "Yes" )
tripSum <- tripSummary(trips, colony = colony, nests = F)
tripSum
frange <- median(tripSum$max_dist)
frange
c(min(tripSum$max_dist), max(tripSum$max_dist))
fduration <- median(tripSum$duration)
fduration
c(min(tripSum$duration), max(tripSum$duration))
trips_prj <- projectTracks(trips)
HVALS <- findScale(trips_prj,
scaleARS = F,
sumTrips = tripSum
)
HVALS
# HVALS <- findScale(trips,
#   scaleARS = T,
#   sumTrips = tripSum,
#   scalesFPT = seq(1, frange),
#   plotPeaks = T,
#   peakMethod = "first"
# )
# HVALS
## 4. ####
trips_prj <- trips_prj[trips_prj$ColDist > 2, ] # remove trip start and end points near colony
HVALS <- findScale(trips_prj,
scaleARS = T,
sumTrips = tripSum
)
HVALS
indEffect <- indEffectTest(trips_prj, groupVar="ID", tripID="trip_id", method="BA", scale=HVALS$mag, iterations=10)
indEffect$`Kolmogorov-Smirnov`
## 5. ####
### estSpaceUse (Produce utilization distributions for each individual) ~~~~~~~~~~~~~~~
h <- HVALS$mag
KDE.Surface <- estSpaceUse(tracks=trips_prj, scale = h, levelUD = 50, polyOut=T)
kde_map <- mapKDE(KDE.Surface$UDPolygons, show=F)
ud_map <- mapKDE(KDE.Surface$KDE.Surface, show=F)
n <- length(KDE.Surface$KDE.Surface)
# ggsave( paste0("C:/Users/Martim Bill/Documents/mIBA_package/figures/masked_boobys/indcores_", "h", round(h), "_", "n",n, ".png"), width = 8, height=6)
# plot(KDE.Surface$KDE.Surface[[4]]) # if polyOut=T
# plot(KDE.Surface[[1]])             # if polyOut=F
## 6. ####
### repAssess (Assess representativeness of tracked sample ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
before <- Sys.time()s
repr <- repAssess(trips_prj, KDE=KDE.Surface$KDE.Surface, iteration=1, levelUD=50, avgMethod="mean", nCores = 2)
Sys.time() - before
## 7. ####
### findKBA (Identify areas of significant aggregation) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
popsize <- 500 # pairs or individuals? Oppel et al. 2015
KBA_sf <- findKBA(KDE.Surface$KDE.Surface, represent=repr$out, popSize = popsize, polyOut = T)
mapKBA(KBA_sf, colony = colony)
pacman::p_load(dplyr, lubridate, sf, track2KBA)
# load data
setwd("C:/Users/Martim Bill/Documents/track2iba")
load("all_orig_dev_files/example_data/SG_Seal_FinalData4mIBA_V3.Rdata")
ses <- subset(Data3, Data3$common_name=="SES")
afs <- subset(Data3, Data3$common_name!="SES")
col1 <- subset(afs, afs$SpecificColony=="BirdIsl")
col2 <- subset(afs, afs$SpecificColony=="Husvik")
##########
tracks <- col1
pacman::p_load(dplyr, lubridate, sf, track2KBA)
getwd
getwd()
load("C:/Users/Martim Bill/Documents/mIBA_package/all_orig_dev_files/example_data/SG_Seal_FinalData4mIBA_V3.Rdata")
ses <- subset(Data3, Data3$common_name=="SES")
afs <- subset(Data3, Data3$common_name!="SES")
col1 <- subset(afs, afs$SpecificColony=="BirdIsl")
col2 <- subset(afs, afs$SpecificColony=="Husvik")
tracks <- col1
tracks <- subset(tracks, tracks$breed_stage=="Breeding")
n_distinct(tracks$track_id)
if(tracks$SpecificColony[1] == "Husvik"){
colony <- data.frame(Longitude = -36.7116, Latitude = -54.18)
} else if (tracks$SpecificColony[1] == "BirdIsl"){
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
rename(Longitude=lon_colony,Latitude=lat_colony)
}
colony$Longitude <- as.numeric(colony$Longitude)
colony$Latitude <- as.numeric(colony$Latitude)
### for a dataset with an already defined DateTime field
tracks_form <- formatFields(tracks, field_ID = "track_id", field_Lat="Latitude", field_Lon="Longitude", field_DateTime="date", cleanDF = F)
### for a dataset with an already defined DateTime field
tracks_form <- formatFields(tracks, fieldID = "track_id", fieldLat="Latitude", fieldLon="Longitude", fieldDateTime="date", cleanDF = F)
str(tracks_form)
Trips <- tripSplit(tracks_form, colony=colony, innerBuff = 5, returnBuff = 50, duration=12, rmNonTrip = T)
TripSum <- tripSummary(Trips, colony)
TripSum
frange <- median(TripSum$max_dist)
frange
c(min(TripSum$max_dist), max(TripSum$max_dist))
fdur <- median(na.omit(TripSum$duration))/24
fdur
c(min(na.omit(TripSum$duration)), max(na.omit(TripSum$duration)))/24
Trips_list <- vector(mode="list", dplyr::n_distinct(Trips$ID))
for(i in 1:dplyr::n_distinct(Trips$ID)){
one <- Trips[Trips$ID==unique(Trips$ID)[i], ]
one$duplicated <- duplicated(one$DateTime)
Trips_list[[i]] <- one
}
Trips <- do.call(rbind, Trips_list)
Trips <- Trips[Trips$duplicated == FALSE, ]
HVALS <- findScale(Trips,
ARSscale = F,
Trip_summary = TripSum
)
HVALS <- findScale(Trips,
scaleARS = T,
Trip_summary = TripSum
)
HVALS <- findScale(Trips,
scaleARS = T,
sumTrips = TripSum
)
HVALS
debug(findScale)
HVALS <- findScale(Trips,
scaleARS = T,
sumTrips = TripSum
)
med_displace
res
(max(
abs(minX - maxX) / 500, abs(minY - maxY) / 500)
) / 1000
minX
Trips
is.projected(Trips)
sp::is.projected(Trips)
Trips <- projectTracks(dataGroup = Trips)
HVALS <- findScale(Trips,
scaleARS = T,
sumTrips = TripSum
)
HVALS
## 5. ####
### estSpaceUse (Produce utilization distributions for each individual) ~~~~~~~~~~~~~~~
h <- HVALS$mag
Trips <- Trips[Trips$ColDist > 5, ] # remove trip start and end points near colony
KDE.Surface <- estSpaceUse(DataGroup=Trips, Scale = h, UDLev = 50, polyOut=T, plot = T)
KDE.Surface <- estSpaceUse(tracks=Trips, scale = h, levelUD = 50, polyOut=T)
mapKDE(KDE.Surface$KDE.Surface)
mapKDE(KDE.Surface$UDPolygons)
n <- length(KDE.Surface$KDE.Surface)
ggsave( paste0("C:/Users/Martim Bill/Documents/mIBA_package/figures/fur_seals/indcores_", "h", round(h), "_", "n",n, ".png"), width = 8, height=6)
library(ggplot2)
n <- length(KDE.Surface$KDE.Surface)
ggsave( paste0("C:/Users/Martim Bill/Documents/mIBA_package/figures/fur_seals/indcores_", "h", round(h), "_", "n",n, ".png"), width = 8, height=6)
repr <- repAssess(Trips, KDE=KDE.Surface$KDE.Surface, iteration=50)
debug(repAssess)
repr <- repAssess(Trips, KDE=KDE.Surface$KDE.Surface, iteration=1)
head(tracks)
repr <- repAssess(Trips, KDE=KDE.Surface$KDE.Surface, iteration=1)
head(tracks)
Trips
repr <- repAssess(tracks = Trips, KDE=KDE.Surface$KDE.Surface, iteration=1)
head(tracks)
class(tracks)
Result <- data.frame()
LoopN <- NULL # make R CMD Check happy
LoopN = 1
N <- DoubleLoop$SampleSize[LoopN]
i <- DoubleLoop$iteration[LoopN]
Output <- data.frame(SampleSize = N, InclusionMean = 0,iteration=i)
RanNum <- sample(UIDs, N, replace=FALSE)
NotSelected <- tracks[!tracks$ID %in% RanNum,]
SelectedTracks <- tracks[tracks$ID %in% RanNum,]
# if ID lvls start with number, add X for indexing ------------------------
if( all(stringr::str_detect(unique(tracks$ID), pattern = "^[0-9]")) ){
Selected <- KDEraster[[paste("X", RanNum, sep = "")]]
} else {
Selected <- KDEraster[[ RanNum ]]
}
N <- DoubleLoop$SampleSize[LoopN]
i <- DoubleLoop$iteration[LoopN]
Output <- data.frame(SampleSize = N, InclusionMean = 0,iteration=i)
RanNum <- sample(UIDs, N, replace=FALSE)
NotSelected <- tracks[!tracks$ID %in% RanNum,]
SelectedTracks <- tracks[tracks$ID %in% RanNum,]
all(stringr::str_detect(unique(tracks$ID), pattern = "^[0-9]"))
Selected <- KDEraster[[paste("X", RanNum, sep = "")]]
KDEstack <- raster::stack(Selected) # list of RasterLayers to RasterStack
KDEcmbnd <- raster::calc(KDEstack, mean)                 # arithmetic mean
### Calculating inclusion value, using Kernel surface ---------------------
KDElev <- KDEcmbnd
pixArea <- raster::res(KDElev)[1]
df <- data.frame(UD = raster::getValues(KDElev)) %>%
mutate(rowname = seq_len(length(raster::getValues(KDElev)))) %>%
mutate(usage = .data$UD * (pixArea^2)) %>%
arrange(desc(.data$usage)) %>%
mutate(cumulUD = cumsum(.data$usage)) %>%
mutate(INSIDE = ifelse(.data$cumulUD < (levelUD/100), 1, NA)) %>%
arrange(.data$rowname) %>%
dplyr::select(.data$INSIDE)
KDElev[] <- df$INSIDE
Overlain_Raster <- raster::extract(KDElev, NotSelected)
Output$InclusionMean <- length(
which(!is.na(Overlain_Raster)))/nrow(NotSelected
)
Output
debug(repAssess)
undebug(repAssess)
repr <- repAssess(tracks = Trips, KDE=KDE.Surface$KDE.Surface, iteration=1)
repr
repr <- repAssess(tracks = Trips, KDE=KDE.Surface$KDE.Surface, iteration=5)
plot.new()
?plot.new
repr <- repAssess(tracks = Trips, KDE=KDE.Surface$KDE.Surface, iteration=1)
plot.new()
plot(1, 1)
plot.new(plot(1,1))
?plot.new
windows()
library(dplyr)
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
trips <- tripSplit(tracks, colony=colony, innerBuff=2, returnBuff=10, duration=1, nests = F, rmNonTrip = T)
tripmaps <- mapTrips(trips, colony=colony)
trips <- subset(trips, trips$Returns == "Yes" )
tripSum <- tripSummary(trips, colony = colony, nests = F)
tripSum
frange <- median(tripSum$max_dist)
frange
c(min(tripSum$max_dist), max(tripSum$max_dist))
fduration <- median(tripSum$duration)
fduration
c(min(tripSum$duration), max(tripSum$duration))
trips_prj <- projectTracks(trips)
HVALS <- findScale(trips_prj,
scaleARS = T,
sumTrips = tripSum
)
HVALS
## 4. ####
trips_prj <- trips_prj[trips_prj$ColDist > 2, ] # remove trip start and end points near colony
## 5. ####
### estSpaceUse (Produce utilization distributions for each individual) ~~~~~~~~~~~~~~~
h <- HVALS$mag
KDE.Surface <- estSpaceUse(tracks=trips_prj, scale = h, levelUD = 50, polyOut=T)
kde_map <- mapKDE(KDE.Surface$UDPolygons, show=F)
repr <- repAssess(trips_prj, KDE=KDE.Surface$KDE.Surface, iteration=1, levelUD=50, avgMethod="mean", nCores = 2)
kde_map <- mapKDE(KDE.Surface$UDPolygons, show=F)
kde_map
repr <- repAssess(trips_prj, KDE=KDE.Surface$KDE.Surface, iteration=1, levelUD=50, avgMethod="mean", nCores = 2)
dev.new()
repr <- repAssess(trips_prj, KDE=KDE.Surface$KDE.Surface, iteration=1, levelUD=50, avgMethod="mean", nCores = 2)
repr <- repAssess(trips_prj, KDE=KDE.Surface$KDE.Surface, iteration=1, levelUD=50, avgMethod="mean", nCores = 2)
plot.window()
plot.new()
repr <- repAssess(trips_prj, KDE=KDE.Surface$KDE.Surface, iteration=1, levelUD=50, avgMethod="mean", nCores = 2)
dev.off()
kde_map
repr <- repAssess(trips_prj, KDE=KDE.Surface$KDE.Surface, iteration=1, levelUD=50, avgMethod="mean", nCores = 2)
pacman::p_load(dplyr, lubridate, sf, track2KBA, ggplot2)
# load data
# setwd("C:/Users/Martim Bill/Documents/track2iba")
load("C:/Users/Martim Bill/Documents/mIBA_package/all_orig_dev_files/example_data/SG_Seal_FinalData4mIBA_V3.Rdata")
ses <- subset(Data3, Data3$common_name=="SES")
afs <- subset(Data3, Data3$common_name!="SES")
col1 <- subset(afs, afs$SpecificColony=="BirdIsl")
col2 <- subset(afs, afs$SpecificColony=="Husvik")
##########
tracks <- col1
# tracks <- col2
## filter to breeding stage only
tracks <- subset(tracks, tracks$breed_stage=="Breeding")
n_distinct(tracks$track_id)
if(tracks$SpecificColony[1] == "Husvik"){
colony <- data.frame(Longitude = -36.7116, Latitude = -54.18)
} else if (tracks$SpecificColony[1] == "BirdIsl"){
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
rename(Longitude=lon_colony,Latitude=lat_colony)
}
colony$Longitude <- as.numeric(colony$Longitude)
colony$Latitude <- as.numeric(colony$Latitude)
######
### for a dataset with an already defined DateTime field
tracks_form <- formatFields(tracks, fieldID = "track_id", fieldLat="Latitude", fieldLon="Longitude", fieldDateTime="date", cleanDF = F)
str(tracks_form)
### for a dataset with both date and time fields #####
# tracks <- formatFields(tracks, field_id = "track_id", field_lat="latitude", field_lon="longitude", field_date="date_gmt", field_time="time_gmt")
#####
# source("tripSplit.R")
Trips <- tripSplit(tracks_form, colony=colony, innerBuff = 5, returnBuff = 50, duration=12, rmNonTrip = T)
######
# source("tripSummary.R")
# Trips <- subset(Trips, Trips$Returns == "Yes" )
TripSum <- tripSummary(Trips, colony)
TripSum
frange <- median(TripSum$max_dist)
frange
c(min(TripSum$max_dist), max(TripSum$max_dist))
fdur <- median(na.omit(TripSum$duration))/24
fdur
c(min(na.omit(TripSum$duration)), max(na.omit(TripSum$duration)))/24
###### Identify and filter out duplicate DT stamps #####
Trips_list <- vector(mode="list", dplyr::n_distinct(Trips$ID))
for(i in 1:dplyr::n_distinct(Trips$ID)){
one <- Trips[Trips$ID==unique(Trips$ID)[i], ]
one$duplicated <- duplicated(one$DateTime)
Trips_list[[i]] <- one
}
Trips <- do.call(rbind, Trips_list)
Trips <- Trips[Trips$duplicated == FALSE, ]
## 3. ####
Trips <- projectTracks(dataGroup = Trips)
HVALS <- findScale(Trips,
scaleARS = T,
sumTrips = TripSum
)
HVALS
?projectTracks
mapKDE(KDE.Surface$KDE.Surface, colony = colony)
dev.off()
mapKDE(KDE.Surface$UDPolygons, colony = colony)
Trips
mapTrips(Trips)
mapTrips(Trips, coloiny)
mapTrips(Trips, colony)
Trips$Returns == "Yes"
table(Trips$Returns == "Yes")
TripSum <- tripSummary(Trips, colony)
TripSum
frange <- median(TripSum$max_dist)
frange
c(min(TripSum$max_dist), max(TripSum$max_dist))
fdur <- median(na.omit(TripSum$duration))/24
fdur
c(min(na.omit(TripSum$duration)), max(na.omit(TripSum$duration)))/24
Trips_list <- vector(mode="list", dplyr::n_distinct(Trips$ID))
for(i in 1:dplyr::n_distinct(Trips$ID)){
one <- Trips[Trips$ID==unique(Trips$ID)[i], ]
one$duplicated <- duplicated(one$DateTime)
Trips_list[[i]] <- one
}
Trips <- do.call(rbind, Trips_list)
Trips <- Trips[Trips$duplicated == FALSE, ]
Trips <- projectTracks(dataGroup = Trips)
HVALS <- findScale(Trips,
scaleARS = T,
sumTrips = TripSum
)
HVALS
## 5. ####
### estSpaceUse (Produce utilization distributions for each individual) ~~~~~~~~~~~~~~~
h <- HVALS$mag
Trips <- Trips[Trips$ColDist > 5, ] # remove trip start and end points near colony
KDE.Surface <- estSpaceUse(tracks=Trips, scale = h, levelUD = 50, polyOut=T)
mapKDE(KDE.Surface$UDPolygons, colony = colony)
repr <- repAssess(Trips, KDE=KDE.Surface$KDE.Surface, iteration=50)
popsize <- 64545 * 2 # number of fur seal pairs (doubled)
# KBAs <- findKBA(KDE.Surface, Represent=repr$out, polyOut = F)
KBAs <- findKBA(KDE.Surface, represent=repr$out, popSize = popsize, polyOut = T)
KDE.Surface
# KBAs <- findKBA(KDE.Surface, Represent=repr$out, polyOut = F)
KBAs <- findKBA(KDE.Surface$UDPolygons, represent=repr$out, popSize = popsize, polyOut = T)
class(KDE.Surface$UDPolygons)
?findKBA
# KBAs <- findKBA(KDE.Surface, Represent=repr$out, polyOut = F)
KBAs <- findKBA(KDE.Surface$KDE.Surface, represent=repr$out, popSize = popsize, polyOut = T)
debug(findKBA)
# KBAs <- findKBA(KDE.Surface, Represent=repr$out, polyOut = F)
KBAs <- findKBA(KDE.Surface$KDE.Surface, represent=repr$out, popSize = popsize, polyOut = T)
!class(KDE) %in% c(
"estUDm", "SpatialPixelsDataFrame", "SpatialGridDataFrame")
)
!class(KDE) %in% c(
"estUDm", "SpatialPixelsDataFrame", "SpatialGridDataFrame)
!class(KDE) %in% c("estUDm", "SpatialPixelsDataFrame", "SpatialGridDataFrame)
class(KDE) %in% c("estUDm", "SpatialPixelsDataFrame", "SpatialGridDataFrame)
class(IDE)
class(KDE)
KDE <- KDE.Surface$UDPolygons
class(KDE)
mapKBA(KBA=KBAs, colony = colony)
library(ggmap)
# aggs <- KBAs[KBAs$N_animals > 0, ]
aggs <- KBAs[KBAs$N_animals >= (0.1 * popsize), ]
aggs_3857 <- st_transform(aggs, crs = 3857)
# aggs_3857 <- st_transform(aggs, crs = 3857)
xmin <- st_bbox(aggs)[[1]] - 0.1
xmax <- st_bbox(aggs)[[3]] + 0.15
ymin <- st_bbox(aggs)[[2]] - 0.1
ymax <- st_bbox(aggs)[[4]] + 0.1
gmap <- ggmap::get_map(location=c(xmin, ymin, xmax, ymax), zoom=10, maptype = "satellite")
# plot(st_transform(colony_sf, crs = 3857), add=T, col=2) # doesn't work for some reason!
colony_sf <- st_transform(st_as_sf(colony, coords = c("Longitude", "Latitude"), crs='+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'), 3857)
#
# Use the function:
source("C:/Users/Martim Bill/Documents/R/source_scripts/ggmap_bbox.r")
gmap <- ggmap_bbox(gmap)
ggmap(gmap) +
coord_sf(crs = st_crs(3857)) + # force the ggplot2 map to be in 3857
geom_sf(data = aggs_3857, inherit.aes = FALSE, aes(fill=N_animals/1000), color=NA) +
geom_sf(data=colony_sf, inherit.aes = FALSE,  color="black", fill="red", shape=23) +
scale_fill_gradientn(colours=sf.colors(n=3)) +
guides(
fill = guide_colorbar(
title.position="top",
title = "N animals (thousands)",
barwidth  = 8,
barheight = 1)) +
theme(
panel.background=element_rect(fill="white", colour="black"),
axis.text=element_text(size=9, color="black"),
axis.title=element_text(size=14),
legend.direction = "horizontal",
legend.position=c(0.15, 0.1),
legend.title=element_text(size=14),
legend.text = element_text(size = 12)) +
ylab("Latitude") +
xlab("Longitude")
nrow(subset(Trips, Trips$Returns == "Yes" ))
nrow(Trips)
TripsA <- Trips
Trips <- subset(Trips, Trips$Returns == "Yes" )
TripSum <- tripSummary(Trips, colony)
TripSum
frange <- median(TripSum$max_dist)
frange
c(min(TripSum$max_dist), max(TripSum$max_dist))
fdur <- median(na.omit(TripSum$duration))/24
fdur
c(min(na.omit(TripSum$duration)), max(na.omit(TripSum$duration)))/24
Trips_list <- vector(mode="list", dplyr::n_distinct(Trips$ID))
Trips <- projectTracks(dataGroup = Trips)
Trips <- projectTracks(dataGroup = Trips, reproject = T)
HVALS <- findScale(Trips,
scaleARS = T,
sumTrips = TripSum
)
HVALS
## 5. ####
### estSpaceUse (Produce utilization distributions for each individual) ~~~~~~~~~~~~~~~
h <- HVALS$mag
KDE.Surface <- estSpaceUse(tracks=Trips, scale = h, levelUD = 50, polyOut=T)
popsize <- 64545 * 2 # number of fur seal pairs (doubled)
# KBAs <- findKBA(KDE.Surface, Represent=repr$out, polyOut = F)
KBAs <- findKBA(KDE.Surface$KDE.Surface, represent=repr$out, popSize = popsize, polyOut = T)
undebug(findKBA)
# KBAs <- findKBA(KDE.Surface, Represent=repr$out, polyOut = F)
KBAs <- findKBA(KDE.Surface$KDE.Surface, represent=repr$out, popSize = popsize, polyOut = T)
mapKBA(KBA=KBAs, colony = colony)
# how many seals use the 'site'?
KBAs %>% dplyr::filter(.data$potentialKBA==TRUE) %>%
summarise(
max_animals = max(na.omit(N_animals)),
min_animals = min(na.omit(N_animals))
)
library(ggmap)
# aggs <- KBAs[KBAs$N_animals > 0, ]
aggs <- KBAs[KBAs$N_animals >= (0.1 * popsize), ]
aggs_3857 <- st_transform(aggs, crs = 3857)
# aggs_3857 <- st_transform(aggs, crs = 3857)
xmin <- st_bbox(aggs)[[1]] - 0.1
xmax <- st_bbox(aggs)[[3]] + 0.15
ymin <- st_bbox(aggs)[[2]] - 0.1
ymax <- st_bbox(aggs)[[4]] + 0.1
gmap <- ggmap::get_map(location=c(xmin, ymin, xmax, ymax), zoom=10, maptype = "satellite")
# plot(st_transform(colony_sf, crs = 3857), add=T, col=2) # doesn't work for some reason!
colony_sf <- st_transform(st_as_sf(colony, coords = c("Longitude", "Latitude"), crs='+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'), 3857)
#
# Use the function:
source("C:/Users/Martim Bill/Documents/R/source_scripts/ggmap_bbox.r")
gmap <- ggmap_bbox(gmap)
ggmap(gmap) +
coord_sf(crs = st_crs(3857)) + # force the ggplot2 map to be in 3857
geom_sf(data = aggs_3857, inherit.aes = FALSE, aes(fill=N_animals/1000), color=NA) +
geom_sf(data=colony_sf, inherit.aes = FALSE,  color="black", fill="red", shape=23) +
scale_fill_gradientn(colours=sf.colors(n=3)) +
guides(
fill = guide_colorbar(
title.position="top",
title = "N animals (thousands)",
barwidth  = 8,
barheight = 1)) +
theme(
panel.background=element_rect(fill="white", colour="black"),
axis.text=element_text(size=9, color="black"),
axis.title=element_text(size=14),
legend.direction = "horizontal",
legend.position=c(0.15, 0.1),
legend.title=element_text(size=14),
legend.text = element_text(size = 12)) +
ylab("Latitude") +
xlab("Longitude")
ggsave( paste0("C:/Users/Martim Bill/Documents/mIBA_package/figures/fur_seals/XpotKBA_N_animals", "h", round(h), "_", "n",n, ".png"), width = 10, height=8 )
mapTrips(Trips, colony)
Trips <- tripSplit(tracks_form, colony=colony, innerBuff = 5, returnBuff = 10, duration=12, rmNonTrip = T)
mapTrips(Trips, colony)
Trips <- tripSplit(tracks_form, colony=colony, innerBuff = 5, returnBuff = 15, duration=12, rmNonTrip = T)
mapTrips(Trips, colony)
Trips <- tripSplit(tracks_form, colony=colony, innerBuff = 5, returnBuff = 20, duration=12, rmNonTrip = T)
mapTrips(Trips, colony)
Trips <- tripSplit(tracks_form, colony=colony, innerBuff = 5, returnBuff = 25, duration=12, rmNonTrip = T)
mapTrips(Trips, colony)
ggsave( "C:/Users/Martim Bill/Documents/mIBA_package/figures/fur_seals/trips.png", width = 8, height=6)
