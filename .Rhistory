colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
## 2a. ####
### tripSplit (split tracks in to discrete trips [and optionally filter]) ~~~~~~~~~~~~~
trips <- tripSplit(tracks, colony=colony, innerBuff=2, returnBuff=10, duration=1, nests = F, rmNonTrip = T)
tripmaps <- mapTrips(trips, colony=colony)
## 2b. ####
### tripSummary (summary of trip movements, by individual) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
trips <- subset(trips, trips$Returns == "Yes" )
tripSum <- tripSummary(trips, colony = colony, nests = F)
tripSum
frange <- median(tripSum$max_dist)
frange
c(min(tripSum$max_dist), max(tripSum$max_dist))
fduration <- median(tripSum$duration)
fduration
c(min(tripSum$duration), max(tripSum$duration))
## 3. ####
### project trips to equal-area projection ###
trips_prj <- projectTracks(trips)
trips_prj <- projectTracks(dataGroup
)
## 4. ####
### findScale (get average foraging range, a list of H-value options, and test whether desired grid cell for kernel estimation makes sense given movement scale/tracking resolution) ~~~~~~~~~~~~~~~
HVALS <- findScale(trips_prj,
scaleARS = F,
sumTrips = tripSum
)
HVALS
# HVALS <- findScale(trips,
#   scaleARS = T,
#   sumTrips = tripSum,
#   scalesFPT = seq(1, frange),
#   plotPeaks = T,
#   peakMethod = "first"
# )
# HVALS
## 4. ####
trips_prj <- trips_prj[trips_prj$ColDist > 2, ] # remove trip start and end points near colony
### IndEffectTest (test whether individuals are site-faithful across trips) ~~~~~~~~~~~
indEffect <- indEffectTest(trips_prj, groupVar="ID", tripID="trip_id", method="BA", scale=HVALS$mag, iterations=10)
indEffect$`Kolmogorov-Smirnov`
## 5. ####
### estSpaceUse (Produce utilization distributions for each individual) ~~~~~~~~~~~~~~~
h <- HVALS$mag
KDE.Surface <- estSpaceUse(tracks=trips_prj, scale = h, levelUD = 50, polyOut=T)
kde_map <- mapKDE(KDE.Surface$UDPolygons, show=F)
trips <- tripSplit(tracks, colony=colony, innerBuff=2, returnBuff=10, duration=1, nests = F, rmNonTrip = T)
tripmaps <- mapTrips(trips, colony=colony)
## 2b. ####
### tripSummary (summary of trip movements, by individual) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
trips <- subset(trips, trips$Returns == "Yes" )
tripSum <- tripSummary(trips, colony = colony, nests = F)
tripSum
frange <- median(tripSum$max_dist)
frange
c(min(tripSum$max_dist), max(tripSum$max_dist))
fduration <- median(tripSum$duration)
fduration
c(min(tripSum$duration), max(tripSum$duration))
## 3. ####
### project trips to equal-area projection ###
trips_prj <- projectTracks(trips)
trips_prj <- projectTracks(dataGroup
)
## 4. ####
### findScale (get average foraging range, a list of H-value options, and test whether desired grid cell for kernel estimation makes sense given movement scale/tracking resolution) ~~~~~~~~~~~~~~~
HVALS <- findScale(trips_prj,
scaleARS = F,
sumTrips = tripSum
)
HVALS
# HVALS <- findScale(trips,
#   scaleARS = T,
#   sumTrips = tripSum,
#   scalesFPT = seq(1, frange),
#   plotPeaks = T,
#   peakMethod = "first"
# )
# HVALS
## 5. ####
### estSpaceUse (Produce utilization distributions for each individual) ~~~~~~~~~~~~~~~
h <- HVALS$mag
KDE.Surface <- estSpaceUse(tracks=trips_prj, scale = h, levelUD = 50, polyOut=T)
kde_map <- mapKDE(KDE.Surface$UDPolygons, show=F)
###### track2KBA steps ######
library(dplyr)
library(track2KBA)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LOAD OUR track2iba FUNCTIONS - when they have recently changed after package installation
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# setwd("C:\\STEFFEN\\track2iba")
# setwd("C:/Users/Martim Bill/Documents/track2iba")
## 1a.####
### move2KBA (Download and format Movebank data) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# dataset <- move2KBA(MovebankID=621703893, User="bealhammar", Password="xxx")
### Movebank data (from move2KBA)
# tracks <- dataset[["data"]]
# colony <- dataset[["site"]]
#
# head(tracks)
# head(colony)
## 1b. ####
### formatFields (upload data in own or STDB format, and re-format) ~~~~~~~~~~~~~~~~~~~
### Masked Booby
# tracks <- data.table::fread("all_orig_dev_files/example_data/Dataset_1004_2019-03-01.csv")   # Masked Booby
# tracks2 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1008_2019-03-01.csv")   # Masked Booby - NOT IN PACKAGE DATA
# tracks3 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1009_2019-03-01.csv")   # Masked Booby - NOT IN PACKAGE DATA
# tracks4 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1010_2019-03-01.csv")   # Masked Booby
# tracks5 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1011_2019-03-01.csv")   # Masked Booby
# tracks6 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1012_2019-03-01.csv")   # Masked Booby
# tracks7 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1013_2019-03-01.csv")   # Masked Booby
# tracks <- rbind.data.frame(tracks1, tracks2, tracks3, tracks4, tracks5, tracks6, tracks7)
# tracks <- rbind.data.frame(tracks1, tracks2, tracks3) # for README and vignette
# tracks <- data.table::fread("all_orig_dev_files/example_data/Dataset_1151_2019-03-01.csv") # Black-legged kittiwake
# tracks1 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1245_2019-03-01.csv") # Razorbill
# tracks2 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1246_2019-03-01.csv") # Razorbill
### Shag
# tracks1 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1219_2019-03-01.csv") # Eur. Shag
# tracks2 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1218_2019-03-01.csv") # Eur. Shag
#
# tracks <- rbind.data.frame(tracks1, tracks2) # combine two EUSH datasets
## MABO St Helena (using package example data)
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
## 2a. ####
### tripSplit (split tracks in to discrete trips [and optionally filter]) ~~~~~~~~~~~~~
trips <- tripSplit(tracks, colony=colony, innerBuff=2, returnBuff=10, duration=1, nests = F, rmNonTrip = T)
tripmaps <- mapTrips(trips, colony=colony)
## 2b. ####
### tripSummary (summary of trip movements, by individual) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
trips <- subset(trips, trips$Returns == "Yes" )
tripSum <- tripSummary(trips, colony = colony, nests = F)
tripSum
frange <- median(tripSum$max_dist)
frange
c(min(tripSum$max_dist), max(tripSum$max_dist))
fduration <- median(tripSum$duration)
fduration
c(min(tripSum$duration), max(tripSum$duration))
## 3. ####
### project trips to equal-area projection ###
trips_prj <- projectTracks(trips)
library(dplyr)
library(track2KBA)
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
library(dplyr)
library(track2KBA)
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
trips <- tripSplit(tracks, colony=colony, innerBuff=2, returnBuff=10, duration=1, nests = F, rmNonTrip = T)
tripmaps <- mapTrips(trips, colony=colony)
trips <- subset(trips, trips$Returns == "Yes" )
tripSum <- tripSummary(trips, colony = colony, nests = F)
tripSum
frange <- median(tripSum$max_dist)
frange
c(min(tripSum$max_dist), max(tripSum$max_dist))
fduration <- median(tripSum$duration)
fduration
c(min(tripSum$duration), max(tripSum$duration))
trips_prj <- projectTracks(trips)
trips_prj <- projectTracks(dataGroup
)
trips_prj <- projectTracks(tracks
)
trips_prj
trips_prj <- projectTracks(trips)
trips_prj
HVALS <- findScale(trips_prj,
scaleARS = F,
sumTrips = tripSum
)
## 4. ####
trips_prj <- trips_prj[trips_prj$ColDist > 2, ] # remove trip start and end points near colony
h <- HVALS$mag
KDE.Surface <- estSpaceUse(tracks=trips_prj, scale = h, levelUD = 50, polyOut=T)
kde_map <- mapKDE(KDE.Surface$UDPolygons, show=F)
kde_map
ggsave("man/figures/README-estSpaceUse-1X.png")
ggplot2::ggsave("man/figures/README-estSpaceUse-1X.png")
ggplot2::ggsave("man/figures/README-estSpaceUse-1X.png", width = 7, heigh=8)
ggplot2::ggsave("man/figures/README-estSpaceUse-1X.png", width = 8, height=7)
ggplot2::ggsave("man/figures/README-estSpaceUse-1.png", width = 8, height=7)
library(track2KBA)
library(track2KBA)
library(track2KBA)
?indEffectTest
library(track2KBA)
library(track2KBA)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
library(track2KBA)
KBA_sf <- findKBA(KDE.Surface$KDE.Surface, represent=repr$out, popSize = popsize, polyOut = T)
library(track2KBA)
library(dplyr)
library(track2KBA)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LOAD OUR track2iba FUNCTIONS - when they have recently changed after package installation
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# setwd("C:\\STEFFEN\\track2iba")
# setwd("C:/Users/Martim Bill/Documents/track2iba")
## 1a.####
### move2KBA (Download and format Movebank data) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# dataset <- move2KBA(MovebankID=621703893, User="bealhammar", Password="xxx")
### Movebank data (from move2KBA)
# tracks <- dataset[["data"]]
# colony <- dataset[["site"]]
#
# head(tracks)
# head(colony)
## 1b. ####
### formatFields (upload data in own or STDB format, and re-format) ~~~~~~~~~~~~~~~~~~~
### Masked Booby
# tracks <- data.table::fread("all_orig_dev_files/example_data/Dataset_1004_2019-03-01.csv")   # Masked Booby
# tracks2 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1008_2019-03-01.csv")   # Masked Booby - NOT IN PACKAGE DATA
# tracks3 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1009_2019-03-01.csv")   # Masked Booby - NOT IN PACKAGE DATA
# tracks4 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1010_2019-03-01.csv")   # Masked Booby
# tracks5 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1011_2019-03-01.csv")   # Masked Booby
# tracks6 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1012_2019-03-01.csv")   # Masked Booby
# tracks7 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1013_2019-03-01.csv")   # Masked Booby
# tracks <- rbind.data.frame(tracks1, tracks2, tracks3, tracks4, tracks5, tracks6, tracks7)
# tracks <- rbind.data.frame(tracks1, tracks2, tracks3) # for README and vignette
# tracks <- data.table::fread("all_orig_dev_files/example_data/Dataset_1151_2019-03-01.csv") # Black-legged kittiwake
# tracks1 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1245_2019-03-01.csv") # Razorbill
# tracks2 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1246_2019-03-01.csv") # Razorbill
### Shag
# tracks1 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1219_2019-03-01.csv") # Eur. Shag
# tracks2 <- data.table::fread("all_orig_dev_files/example_data/Dataset_1218_2019-03-01.csv") # Eur. Shag
#
# tracks <- rbind.data.frame(tracks1, tracks2) # combine two EUSH datasets
## MABO St Helena (using package example data)
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
## 2a. ####
### tripSplit (split tracks in to discrete trips [and optionally filter]) ~~~~~~~~~~~~~
trips <- tripSplit(tracks, colony=colony, innerBuff=2, returnBuff=10, duration=1, nests = F, rmNonTrip = T)
tripmaps <- mapTrips(trips, colony=colony)
## 2b. ####
### tripSummary (summary of trip movements, by individual) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
trips <- subset(trips, trips$Returns == "Yes" )
tripSum <- tripSummary(trips, colony = colony, nests = F)
tripSum
frange <- median(tripSum$max_dist)
frange
c(min(tripSum$max_dist), max(tripSum$max_dist))
fduration <- median(tripSum$duration)
fduration
c(min(tripSum$duration), max(tripSum$duration))
## 3. ####
### project trips to equal-area projection ###
trips_prj <- projectTracks(trips)
## 4. ####
### findScale (get average foraging range, a list of H-value options, and test whether desired grid cell for kernel estimation makes sense given movement scale/tracking resolution) ~~~~~~~~~~~~~~~
HVALS <- findScale(trips_prj,
scaleARS = F,
sumTrips = tripSum
)
HVALS
# HVALS <- findScale(trips,
#   scaleARS = T,
#   sumTrips = tripSum,
#   scalesFPT = seq(1, frange),
#   plotPeaks = T,
#   peakMethod = "first"
# )
# HVALS
## 4. ####
trips_prj <- trips_prj[trips_prj$ColDist > 2, ] # remove trip start and end points near colony
## 5. ####
### estSpaceUse (Produce utilization distributions for each individual) ~~~~~~~~~~~~~~~
h <- HVALS$mag
KDE.Surface <- estSpaceUse(tracks=trips_prj, scale = h, levelUD = 50, polyOut=T)
repr <- repAssess(trips_prj, KDE=KDE.Surface$KDE.Surface, Iteration=1, levelUD=50, avgMethod="mean", nCores = 2)
KBA_sf <- findKBA(KDE.Surface$KDE.Surface, represent=repr$out, popSize = popsize, polyOut = T)
repr <- repAssess(trips_prj, KDE=KDE.Surface$KDE.Surface, iteration=1, levelUD=50, avgMethod="mean", nCores = 2)
KBA_sf <- findKBA(KDE.Surface$KDE.Surface, represent=repr$out, popSize = popsize, polyOut = T)
?assign
repr <- repAssess(trips_prj, KDE=KDE.Surface$KDE.Surface, iteration=1, levelUD=50, avgMethod="mean", nCores = 2)
library(track2KBA)
KBA_sf <- findKBA(KDE.Surface$KDE.Surface, represent=repr$out, popSize = popsize, polyOut = T)
## 7. ####
### findKBA (Identify areas of significant aggregation) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
popsize <- 500 # pairs or individuals? Oppel et al. 2015
KBA_sf <- findKBA(KDE.Surface$KDE.Surface, represent=repr$out, popSize = popsize, polyOut = T)
mapKBA(KBA_sf, colony = colony)
install.packages("qpdf")
R CMD check --as-cran
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
path.expand()
Sys.getenv("R_QPDF", "qpdf")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
.libPaths()
Sys.setenv(
PATH = paste(
Sys.getenv("PATH"),
"C:\\Program Files\\qpdf-10.0.1\\bin",
sep = ";"
)
)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
.rs.restartR()
library(track2KBA)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
.rs.restartR()
?devtools::check
strsplit(Sys.getenv("PATH"), ";")
shell('setx PATH "C:\\Program Files\\qpdf-10.0.1\\bin"')
.rs.restartR()
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
strsplit(Sys.getenv("PATH"), ";")
Sys.getenv("PATH")
strsplit(Sys.getenv("PATH"), ";")
old_path <- Sys.getenv("PATH")
Sys.setenv(PATH = paste(old_path, "C:\\Program Files\\qpdf-10.0.1\\bin", sep = ";"))
strsplit(Sys.getenv("PATH"), ";")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
?Sys.setenv
Sys.getenv('R_USER')
Sys.setenv(PATH = paste(old_path, "C:\\Program Files\\qpdf-10.0.1\\bin", sep = ";"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
library(track2KBA)
library(track2KBA)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
library(track2KBA)
library(track2KBA)
library(goodpractice)
gp("C:/Users/Martim Bill/Documents/track2iba")
?devtools::check()
check("track2KBA")
library(devtools)
check("track2KBA")
check("C:/Users/Martim Bill/Documents/track2iba")
check("C:/Users/Martim Bill/Documents/track2iba")
check("C:/Users/Martim Bill/Documents/track2iba", manual = T)
?devtools::build_manual()
build_manual("C:/Users/Martim Bill/Documents/track2iba")
build_manual("C:/Users/Martim Bill/Documents/track2iba")
build_manual
Sys.which("pdflatex")
Sys.which("tinytex")
Sys.which("qpdf")
Sys.which("MiKTeX")
Sys.getenv("PATH")
Sys.setenv(
PATH = paste(
Sys.getenv("PATH"),
"C:\\Program Files\\qpdf-10.0.1\\bin",
sep = ";"
)
)
strsplit(Sys.getenv("PATH"), ";")
Sys.setenv(
PATH=paste(
Sys.getenv("PATH"),
"C:/Program Files/MiKTeX 2.9/miktex/bin/x64/",
sep=";")
)
strsplit(Sys.getenv("PATH"), ";")
.rs.restartR()
build_manual("C:/Users/Martim Bill/Documents/track2iba")
strsplit(Sys.getenv("PATH"), ";") # check PATH
strsplit(Sys.getenv("PATH"), ";") # check PATH
.rs.restartR()
strsplit(Sys.getenv("PATH"), ";") # check PATH
strsplit(Sys.getenv("PATH"), ";") # check PATH
Sys.setenv(
PATH=paste(
Sys.getenv("PATH"),
"C:\\Program Files\\MiKTeX 2.9\\miktex\\bin\\x64",
sep=";")
)
strsplit(Sys.getenv("PATH"), ";") # check PATH
build_manual("C:/Users/Martim Bill/Documents/track2iba")
.rs.restartR()
build_manual("C:/Users/Martim Bill/Documents/track2iba")
Sys.setenv(
PATH=paste(
Sys.getenv("PATH"),
"C:\\Program Files\\MiKTeX 2.9\\miktex\\bin\\x64",
sep=";")
)
build_manual("C:/Users/Martim Bill/Documents/track2iba")
.rs.restartR()
strsplit(Sys.getenv("PATH"), ";") # check PATH
check("C:/Users/Martim Bill/Documents/track2iba", manual = T)
strsplit(Sys.getenv("PATH"), ";") # check PATH
Sys.setenv(
PATH=paste(
Sys.getenv("PATH"),
"C:\\Program Files\\MiKTeX 2.9\\miktex\\bin\\x64",
sep=";")
)
check("C:/Users/Martim Bill/Documents/track2iba", manual = T)
## Some calls which help ascertain what good practices track2KBA is breaking ##
library(goodpractice)
gp("C:/Users/Martim Bill/Documents/track2iba")
library(cyclocomp)
cyclocomp(formatFields)
cyclocomp(tripSplit)
cyclocomp(tripSummary)
cyclocomp(findScale) ## HIGH, gets warning from gp()
cyclocomp(IndEffectTest)
cyclocomp(estSpaceUse)
cyclocomp(findKBA)
cyclocomp(iondEffectTest)
cyclocomp(indEffectTest)
cyclocomp(move2KBA)
cyclocomp(mapTrips)
cyclocomp(mapKDE)
cyclocomp(mapKBA)
cyclocomp(move2KBA)
cyclocomp(formatFields)
cyclocomp(tripSplit)
cyclocomp(mapTrips)
cyclocomp(tripSummary)
cyclocomp(findScale) ## HIGH, gets warning from gp()
cyclocomp(indEffectTest)
cyclocomp(estSpaceUse)
cyclocomp(mapKDE)
cyclocomp(findKBA)
cyclocomp(mapKBA)
cyclocomp(repAssess)
!requireNamespace("parallel", quietly = TRUE) |
!requireNamespace("doParallel", quietly = TRUE)
library(track2KBA)
library(track2KBA)
((((!is.null(fieldDate)) &
(!is.null(fieldTime))) &
(!is.null(fieldDateTime))))
library(track2KBA)
library(track2KBA)
?tripSplit
library(track2KBA)
library(track2KBA)
library(dplyr)
data("boobies")
tracks <- boobies
colony <- tracks[1,] %>% dplyr::select(lon_colony,lat_colony) %>%
dplyr::rename(Longitude=lon_colony,Latitude=lat_colony)
tracks <- formatFields(tracks, fieldID = "track_id", fieldLat="latitude", fieldLon="longitude", fieldDate="date_gmt", fieldTime="time_gmt")
## 2a. ####
### tripSplit (split tracks in to discrete trips [and optionally filter]) ~~~~~~~~~~~~~
trips <- tripSplit(tracks, colony=colony, innerBuff=2, returnBuff=10, duration=1, nests = F, rmNonTrip = T)
tripmaps <- mapTrips(trips, colony=colony)
trips <- subset(trips, trips$Returns == "Yes" )
tripSum <- tripSummary(trips, colony = colony, nests = F)
tripSum
frange <- median(tripSum$max_dist)
frange
c(min(tripSum$max_dist), max(tripSum$max_dist))
fduration <- median(tripSum$duration)
fduration
c(min(tripSum$duration), max(tripSum$duration))
trips_prj <- projectTracks(trips)
HVALS <- findScale(trips_prj,
scaleARS = F,
sumTrips = tripSum
)
HVALS
# HVALS <- findScale(trips,
#   scaleARS = T,
#   sumTrips = tripSum,
#   scalesFPT = seq(1, frange),
#   plotPeaks = T,
#   peakMethod = "first"
# )
# HVALS
## 4. ####
trips_prj <- trips_prj[trips_prj$ColDist > 2, ] # remove trip start and end points near colony
HVALS <- findScale(trips_prj,
scaleARS = T,
sumTrips = tripSum
)
HVALS
indEffect <- indEffectTest(trips_prj, groupVar="ID", tripID="trip_id", method="BA", scale=HVALS$mag, iterations=10)
indEffect$`Kolmogorov-Smirnov`
## 5. ####
### estSpaceUse (Produce utilization distributions for each individual) ~~~~~~~~~~~~~~~
h <- HVALS$mag
KDE.Surface <- estSpaceUse(tracks=trips_prj, scale = h, levelUD = 50, polyOut=T)
kde_map <- mapKDE(KDE.Surface$UDPolygons, show=F)
ud_map <- mapKDE(KDE.Surface$KDE.Surface, show=F)
n <- length(KDE.Surface$KDE.Surface)
# ggsave( paste0("C:/Users/Martim Bill/Documents/mIBA_package/figures/masked_boobys/indcores_", "h", round(h), "_", "n",n, ".png"), width = 8, height=6)
# plot(KDE.Surface$KDE.Surface[[4]]) # if polyOut=T
# plot(KDE.Surface[[1]])             # if polyOut=F
## 6. ####
### repAssess (Assess representativeness of tracked sample ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
before <- Sys.time()s
repr <- repAssess(trips_prj, KDE=KDE.Surface$KDE.Surface, iteration=1, levelUD=50, avgMethod="mean", nCores = 2)
Sys.time() - before
## 7. ####
### findKBA (Identify areas of significant aggregation) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
popsize <- 500 # pairs or individuals? Oppel et al. 2015
KBA_sf <- findKBA(KDE.Surface$KDE.Surface, represent=repr$out, popSize = popsize, polyOut = T)
mapKBA(KBA_sf, colony = colony)
