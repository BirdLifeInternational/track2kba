# analysis <- "spring"
# analysis <- "juvenile"
# analysis <- "adult"
if(analysis == "fall"){
tracks <- tracks %>% filter(
((timestamp > start_autumn_1) | (timestamp < end_autumn_1)) |
((timestamp > start_autumn_2) | (timestamp < end_autumn_2))
)
} else if(analysis == "spring"){
tracks <- tracks %>% filter(
((timestamp > start_spring_1) | (timestamp < end_spring_1)) |
((timestamp > start_spring_2) | (timestamp < end_spring_2))
)
} else if(analysis == "juvenile"){
tracks <- tracks %>% filter(
age == "juvenile"
)
} else if(analysis == "adult"){
tracks <- tracks %>% filter(
age == "adult" | age == "immature"
)
}
## Track2KBA analysis ##
# Format data
tracks <- formatFields(tracks, fieldID = "ID", fieldDateTime = "timestamp", fieldLat = "location.lat", fieldLon = "location.long")
# tracks %>% st_as_sf(coords = c("Longitude","Latitude"), crs = 4326, agr = "constant") %>%
#   mapview::mapview()
# project to custom LAEA projection
TD <- projectTracks(tracks)
rm(tracks)
HVALS <- findScale(TD, scalesFPT = c(1:100))
HVALS$scaleARS
c(0.5, c(1:100))
migTD <- readRDS("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\migratory_storks.rds")
# some funny dates in second spring so need to isolate to convert to Date
migdates <- migdates %>%  mutate(
start_autumn_1 = as.Date(start_autumn_1),
end_autumn_1   = as.Date(end_autumn_1),
start_spring_1 = as.Date(start_spring_1),
end_spring_1   = as.Date(end_spring_1),
start_autumn_2 = as.Date(start_autumn_2),
end_autumn_2   = as.Date(end_autumn_2),
start_spring_2 = as.Date(ifelse(start_spring_2 == "", NA, start_spring_2)),
end_spring_2   = as.Date(ifelse(end_spring_2 == "", NA, end_spring_2))
)
migTD <- migTD %>% left_join(migdates, by=c('ID'))
# one <- migTD %>% filter(ID == unique(ID)[1]) %>% st_as_sf(coords = c("location.long","location.lat"), crs = 4326, agr = "constant")
# mapview::mapview(one)
# filter to only birds with at least the first full autumn migration
tracks <- migTD %>% filter(!is.na(end_autumn_1))
# filter to only migratory periods
tracks <- tracks %>% filter(
(timestamp > start_autumn_1) & (timestamp < end_autumn_1)   # 1st autumn migration
| (timestamp > start_spring_1) & (timestamp < end_spring_1) # 1st spring migration
| (timestamp > start_autumn_2) & (timestamp < end_autumn_2) # 2nd autumn mig.
| (timestamp > start_spring_2) & (timestamp < end_spring_2) # 2nd spring mig.
)
# For juvenile birds, retain only first autumn and spring migrations
tracks <- tracks %>% mutate(
filter = ifelse((age == 'juvenile') & (timestamp > start_autumn_2), TRUE, FALSE),
filter = ifelse(is.na(filter), FALSE, filter)
) %>% filter(
filter == FALSE
) %>% dplyr::select(-filter)
# summarise number of IDs with 1, 2, 3 migrations for autumn and spring
# tracks %>% filter(!is.na(end_autumn_1)) %>% summarise(n_distinct(ID))
# tracks %>% filter(!is.na(end_spring_1)) %>% summarise(n_distinct(ID))
# tracks %>% filter(!is.na(end_autumn_2) & age != "juvenile") %>% summarise(n_distinct(ID))
# tracks %>% filter(!is.na(end_spring_2) & age != "juvenile") %>% summarise(n_distinct(ID))
## rough downsample to speed things up ##
# tracks <- tracks %>%
#   filter(row_number() %% 2 == 1) # retain ever nth row
## track2KBA analysis ##
# rm(migTD) # save memory
# analyze all migrations, only fall, or only spring?
analysis <- "all"
# analysis <- "fall"
# analysis <- "spring"
# analysis <- "juvenile"
# analysis <- "adult"
if(analysis == "fall"){
tracks <- tracks %>% filter(
((timestamp > start_autumn_1) | (timestamp < end_autumn_1)) |
((timestamp > start_autumn_2) | (timestamp < end_autumn_2))
)
} else if(analysis == "spring"){
tracks <- tracks %>% filter(
((timestamp > start_spring_1) | (timestamp < end_spring_1)) |
((timestamp > start_spring_2) | (timestamp < end_spring_2))
)
} else if(analysis == "juvenile"){
tracks <- tracks %>% filter(
age == "juvenile"
)
} else if(analysis == "adult"){
tracks <- tracks %>% filter(
age == "adult" | age == "immature"
)
}
## Track2KBA analysis ##
# Format data
tracks <- formatFields(tracks, fieldID = "ID", fieldDateTime = "timestamp", fieldLat = "location.lat", fieldLon = "location.long")
# tracks %>% st_as_sf(coords = c("Longitude","Latitude"), crs = 4326, agr = "constant") %>%
#   mapview::mapview()
# project to custom LAEA projection
TD <- projectTracks(tracks)
rm(tracks)
# get candidate smoothing parameters
# HVALS <- findScale(TD)
HVALS <- findScale(TD, scaleARS = c(0.5, c(1:100)))
HVALS
# get candidate smoothing parameters
# HVALS <- findScale(TD)
HVALS <- findScale(TD, scalesFPT = c(0.5, c(1:100)))
HVALS
# get candidate smoothing parameters
# HVALS <- findScale(TD)
HVALS <- findScale(TD, scalesFPT = c(0.5, c(1:100)))
HVALS
# get candidate smoothing parameters
# HVALS <- findScale(TD)
HVALS <- findScale(TD, scalesFPT = c(1:100))
HVALS
h <- 7.5
# estimate individual core areas
b4 <- Sys.time()
KDE <- estSpaceUse(TD, scale=h, res=2, polyOut=T)
Sys.time() - b4
h <- 7.5
# estimate individual core areas
b4 <- Sys.time()
KDE <- estSpaceUse(TD, scale=h, res=2.5, polyOut=F)
Sys.time() - b4
mapKDE(KDE$UDPolygons)
rm(tracks)
rm(migTD) # save memory
migdates <- read.csv("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\all_migration_dates.csv")
migTD <- readRDS("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\migratory_storks.rds")
# some funny dates in second spring so need to isolate to convert to Date
migdates <- migdates %>%  mutate(
start_autumn_1 = as.Date(start_autumn_1),
end_autumn_1   = as.Date(end_autumn_1),
start_spring_1 = as.Date(start_spring_1),
end_spring_1   = as.Date(end_spring_1),
start_autumn_2 = as.Date(start_autumn_2),
end_autumn_2   = as.Date(end_autumn_2),
start_spring_2 = as.Date(ifelse(start_spring_2 == "", NA, start_spring_2)),
end_spring_2   = as.Date(ifelse(end_spring_2 == "", NA, end_spring_2))
)
migTD <- migTD %>% left_join(migdates, by=c('ID'))
# one <- migTD %>% filter(ID == unique(ID)[1]) %>% st_as_sf(coords = c("location.long","location.lat"), crs = 4326, agr = "constant")
# mapview::mapview(one)
# filter to only birds with at least the first full autumn migration
tracks <- migTD %>% filter(!is.na(end_autumn_1))
# filter to only migratory periods
tracks <- tracks %>% filter(
(timestamp > start_autumn_1) & (timestamp < end_autumn_1)   # 1st autumn migration
| (timestamp > start_spring_1) & (timestamp < end_spring_1) # 1st spring migration
| (timestamp > start_autumn_2) & (timestamp < end_autumn_2) # 2nd autumn mig.
| (timestamp > start_spring_2) & (timestamp < end_spring_2) # 2nd spring mig.
)
# For juvenile birds, retain only first autumn and spring migrations
tracks <- tracks %>% mutate(
filter = ifelse((age == 'juvenile') & (timestamp > start_autumn_2), TRUE, FALSE),
filter = ifelse(is.na(filter), FALSE, filter)
) %>% filter(
filter == FALSE
) %>% dplyr::select(-filter)
# summarise number of IDs with 1, 2, 3 migrations for autumn and spring
# tracks %>% filter(!is.na(end_autumn_1)) %>% summarise(n_distinct(ID))
# tracks %>% filter(!is.na(end_spring_1)) %>% summarise(n_distinct(ID))
# tracks %>% filter(!is.na(end_autumn_2) & age != "juvenile") %>% summarise(n_distinct(ID))
# tracks %>% filter(!is.na(end_spring_2) & age != "juvenile") %>% summarise(n_distinct(ID))
## rough downsample to speed things up ##
# tracks <- tracks %>%
#   filter(row_number() %% 2 == 1) # retain ever nth row
## track2KBA analysis ##
rm(migTD) # save memory
# analyze all migrations, only fall, or only spring?
analysis <- "all"
# analysis <- "fall"
# analysis <- "spring"
# analysis <- "juvenile"
# analysis <- "adult"
if(analysis == "fall"){
tracks <- tracks %>% filter(
((timestamp > start_autumn_1) | (timestamp < end_autumn_1)) |
((timestamp > start_autumn_2) | (timestamp < end_autumn_2))
)
} else if(analysis == "spring"){
tracks <- tracks %>% filter(
((timestamp > start_spring_1) | (timestamp < end_spring_1)) |
((timestamp > start_spring_2) | (timestamp < end_spring_2))
)
} else if(analysis == "juvenile"){
tracks <- tracks %>% filter(
age == "juvenile"
)
} else if(analysis == "adult"){
tracks <- tracks %>% filter(
age == "adult" | age == "immature"
)
}
## Track2KBA analysis ##
# Format data
tracks <- formatFields(tracks, fieldID = "ID", fieldDateTime = "timestamp", fieldLat = "location.lat", fieldLon = "location.long")
# tracks %>% st_as_sf(coords = c("Longitude","Latitude"), crs = 4326, agr = "constant") %>%
#   mapview::mapview()
# project to custom LAEA projection
TD <- projectTracks(tracks)
rm(tracks)
h <- 7.5
b4 <- Sys.time()
KDE <- estSpaceUse(TD, scale=h, res=2.5, polyOut=F)
Sys.time() - b4
mapKDE(KDE$UDPolygons)
mapKDE(KDE)
n <- length(KDE$KDE.Surface)
n
saveRDS(KDE, "C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\analysis\\KDE_h7.5.rds")
# potKBA <- findKBA(KDE = KDE$KDE.Surface, represent = rep$out)
# potKBA <- findKBA(KDE = KDE$KDE.Surface, represent = 96)
potKBA <- findKBA(KDE = readRDS("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\analysis\\KDE_h7.5.rds"), represent = 96, polyOut=F)
pacman::p_load(dplyr, lubridate, sf, track2KBA, ggplot2)
# potKBA <- findKBA(KDE = KDE$KDE.Surface, represent = rep$out)
# potKBA <- findKBA(KDE = KDE$KDE.Surface, represent = 96)
potKBA <- findKBA(KDE = readRDS("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\analysis\\KDE_h7.5.rds"), represent = 96, polyOut=F)
## Crop grid and convert to SF polygons (too big to do within findKBA) ##
fullgrid <- readRDS("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\analysis\\potKBA.rds")
mapKBA(fullgrid)
potKBA <- fullgrid[fullgrid$potentialKBA == TRUE, ]
bbox_poly <- as(extent(as.vector(t(bbox(potKBA)))), "SpatialPolygons")
proj4string(bbox_poly) <- proj4string(potKBA)
potKBA <- brick(potKBA)
potKBA
# potKBA <- findKBA(KDE = KDE$KDE.Surface, represent = rep$out)
# potKBA <- findKBA(KDE = KDE$KDE.Surface, represent = 96)
potKBA <- findKBA(KDE = readRDS("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\analysis\\KDE_h7.5.rds"), represent = 96, polyOut=F)
saveRDS(potKBA, "C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\analysis\\potKBA_h7.5.rds")
# potKBA <- findKBA(KDE = KDE$KDE.Surface, represent = rep$out)
# potKBA <- findKBA(KDE = KDE$KDE.Surface, represent = 96)
potKBA <- findKBA(KDE = readRDS("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\analysis\\KDE_h7.5.rds"), represent = 96, polyOut=F)
library(track2KBA)
# potKBA <- findKBA(KDE = KDE$KDE.Surface, represent = rep$out)
# potKBA <- findKBA(KDE = KDE$KDE.Surface, represent = 96)
potKBA <- findKBA(KDE = readRDS("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\analysis\\KDE_h7.5.rds"), represent = 96, polyOut=F)
saveRDS(potKBA, "C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\analysis\\potKBA_h7.5.rds")
## Crop grid and convert to SF polygons (too big to do within findKBA) ##
fullgrid <- readRDS("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\analysis\\potKBA_h7.5.rds")
mapKBA(fullgrid)
potKBA <- fullgrid[fullgrid$potentialKBA == TRUE, ]
bbox_poly <- as(extent(as.vector(t(bbox(potKBA)))), "SpatialPolygons")
pacman::p_load(dplyr, lubridate, sf, track2KBA, ggplot2, raster)
## Crop grid and convert to SF polygons (too big to do within findKBA) ##
fullgrid <- readRDS("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\analysis\\potKBA_h7.5.rds")
mapKBA(fullgrid)
potKBA <- fullgrid[fullgrid$potentialKBA == TRUE, ]
bbox_poly <- as(extent(as.vector(t(bbox(potKBA)))), "SpatialPolygons")
proj4string(bbox_poly) <- proj4string(potKBA)
potKBA <- brick(potKBA)
potKBA <- crop(potKBA, bbox_poly)
OUTMAP <- raster::aggregate(
as(potKBA, "SpatialPolygonsDataFrame"),
c('N_animals','N_IND','potentialKBA')
)
rm(potKBA)
### CONVERT INTO SIMPLE FEATURE AS OUTPUT AND FOR PLOTTING
potKBA <- sf::st_as_sf(OUTMAP) %>%
sf::st_union(by_feature = TRUE) %>%
# smoothr::smooth(method = "densify") %>%
sf::st_transform(4326) %>%
arrange(.data$N_IND)
rm(OUTMAP)
plot(potKBA)
library(ggmap)
ws_aggs <- potKBA[potKBA$N_animals > 0, ]
xmin <- st_bbox(ws_aggs)[[1]] - 0.95
xmax <- st_bbox(ws_aggs)[[3]] + 0.95
ymin <- st_bbox(ws_aggs)[[2]] - 0.2
ymax <- st_bbox(ws_aggs)[[4]] + 0.2
gmap <- ggmap::get_map(location=c(xmin, ymin, xmax, ymax), zoom=9, maptype = "satellite")
ws_aggs <- st_transform(ws_aggs, crs = 3857)
# Use the function:
source("C:/Users/Martim Bill/Documents/R/source_scripts/ggmap_bbox.r")
gmap <- ggmap_bbox(gmap)
ws_map <- ggmap(gmap) +
coord_sf(crs = st_crs(3857)) + # force the ggplot2 map to be in 3857
# geom_sf(data = ws_aggs, inherit.aes = FALSE, aes(fill=N_animals/), color=NA) +
geom_sf(data = ws_aggs, inherit.aes = FALSE, aes(fill=N_IND), color=NA) +
scale_fill_gradientn(colours=sf.colors(n=3)) +
guides(
fill = guide_colorbar(
barwidth  = 1.75,
title = "N Ind.",
barheight = 10)) +
theme(
panel.background=element_rect(fill="white", colour="black"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text=element_text(size=11, color="black"),
axis.title=element_text(size=16),
legend.direction = "vertical",
legend.position=c(.87, .25),
legend.title=element_text(size=15),
legend.text = element_text(size = 13)) +
ylab("Latitude") +
xlab("Longitude")
ws_map
## only potential KBAs
ggsave( paste0("C:/Users/Martim Bill/Documents/mIBA_package/figures/white_storks/", analysis, "_potKBA_N_INDs_AS1AS2_c2.5_", "h", round(h), "_", "n",n, ".png"), ws_map, width = 8, height=10 )
# analyze all migrations, only fall, or only spring?
analysis <- "all"
## only potential KBAs
ggsave( paste0("C:/Users/Martim Bill/Documents/mIBA_package/figures/white_storks/", analysis, "_potKBA_N_INDs_AS1AS2_c2.5_", "h", round(h), "_", "n",n, ".png"), ws_map, width = 8, height=10 )
h <- 7.5
n <- 76
## only potential KBAs
ggsave( paste0("C:/Users/Martim Bill/Documents/mIBA_package/figures/white_storks/", analysis, "_potKBA_N_INDs_AS1AS2_c2.5_", "h", round(h), "_", "n",n, ".png"), ws_map, width = 8, height=10 )
b4 <- Sys.time()
# rep <- repAssess(TD, KDE$KDE.Surface, iteration=1)
rep <- repAssess(TD, readRDS("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\analysis\\KDE_h7.5.rds"), iteration=100, bootTable = T)
Sys.time() - b4
library(track2KBA)
b4 <- Sys.time()
# rep <- repAssess(TD, KDE$KDE.Surface, iteration=1)
rep <- repAssess(TD, readRDS("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\analysis\\KDE_h7.5.rds"), iteration=100, bootTable = T)
Sys.time() - b4
migdates <- read.csv("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\all_migration_dates.csv")
migTD <- readRDS("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\migratory_storks.rds")
# some funny dates in second spring so need to isolate to convert to Date
migdates <- migdates %>%  mutate(
start_autumn_1 = as.Date(start_autumn_1),
end_autumn_1   = as.Date(end_autumn_1),
start_spring_1 = as.Date(start_spring_1),
end_spring_1   = as.Date(end_spring_1),
start_autumn_2 = as.Date(start_autumn_2),
end_autumn_2   = as.Date(end_autumn_2),
start_spring_2 = as.Date(ifelse(start_spring_2 == "", NA, start_spring_2)),
end_spring_2   = as.Date(ifelse(end_spring_2 == "", NA, end_spring_2))
)
migTD <- migTD %>% left_join(migdates, by=c('ID'))
# one <- migTD %>% filter(ID == unique(ID)[1]) %>% st_as_sf(coords = c("location.long","location.lat"), crs = 4326, agr = "constant")
# mapview::mapview(one)
# filter to only birds with at least the first full autumn migration
tracks <- migTD %>% filter(!is.na(end_autumn_1))
# filter to only migratory periods
tracks <- tracks %>% filter(
(timestamp > start_autumn_1) & (timestamp < end_autumn_1)   # 1st autumn migration
| (timestamp > start_spring_1) & (timestamp < end_spring_1) # 1st spring migration
| (timestamp > start_autumn_2) & (timestamp < end_autumn_2) # 2nd autumn mig.
| (timestamp > start_spring_2) & (timestamp < end_spring_2) # 2nd spring mig.
)
# For juvenile birds, retain only first autumn and spring migrations
tracks <- tracks %>% mutate(
filter = ifelse((age == 'juvenile') & (timestamp > start_autumn_2), TRUE, FALSE),
filter = ifelse(is.na(filter), FALSE, filter)
) %>% filter(
filter == FALSE
) %>% dplyr::select(-filter)
# summarise number of IDs with 1, 2, 3 migrations for autumn and spring
# tracks %>% filter(!is.na(end_autumn_1)) %>% summarise(n_distinct(ID))
# tracks %>% filter(!is.na(end_spring_1)) %>% summarise(n_distinct(ID))
# tracks %>% filter(!is.na(end_autumn_2) & age != "juvenile") %>% summarise(n_distinct(ID))
# tracks %>% filter(!is.na(end_spring_2) & age != "juvenile") %>% summarise(n_distinct(ID))
## rough downsample to speed things up ##
# tracks <- tracks %>%
#   filter(row_number() %% 2 == 1) # retain ever nth row
## track2KBA analysis ##
rm(migTD) # save memory
# analyze all migrations, only fall, or only spring?
analysis <- "all"
# analysis <- "fall"
# analysis <- "spring"
# analysis <- "juvenile"
# analysis <- "adult"
if(analysis == "fall"){
tracks <- tracks %>% filter(
((timestamp > start_autumn_1) | (timestamp < end_autumn_1)) |
((timestamp > start_autumn_2) | (timestamp < end_autumn_2))
)
} else if(analysis == "spring"){
tracks <- tracks %>% filter(
((timestamp > start_spring_1) | (timestamp < end_spring_1)) |
((timestamp > start_spring_2) | (timestamp < end_spring_2))
)
} else if(analysis == "juvenile"){
tracks <- tracks %>% filter(
age == "juvenile"
)
} else if(analysis == "adult"){
tracks <- tracks %>% filter(
age == "adult" | age == "immature"
)
}
## Track2KBA analysis ##
# Format data
tracks <- formatFields(tracks, fieldID = "ID", fieldDateTime = "timestamp", fieldLat = "location.lat", fieldLon = "location.long")
# tracks %>% st_as_sf(coords = c("Longitude","Latitude"), crs = 4326, agr = "constant") %>%
#   mapview::mapview()
# project to custom LAEA projection
TD <- projectTracks(tracks)
rm(tracks)
h <- 7.5
pacman::p_load(dplyr, lubridate, sf, track2KBA, ggplot2, raster)
migdates <- read.csv("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\all_migration_dates.csv")
migTD <- readRDS("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\migratory_storks.rds")
# some funny dates in second spring so need to isolate to convert to Date
migdates <- migdates %>%  mutate(
start_autumn_1 = as.Date(start_autumn_1),
end_autumn_1   = as.Date(end_autumn_1),
start_spring_1 = as.Date(start_spring_1),
end_spring_1   = as.Date(end_spring_1),
start_autumn_2 = as.Date(start_autumn_2),
end_autumn_2   = as.Date(end_autumn_2),
start_spring_2 = as.Date(ifelse(start_spring_2 == "", NA, start_spring_2)),
end_spring_2   = as.Date(ifelse(end_spring_2 == "", NA, end_spring_2))
)
migTD <- migTD %>% left_join(migdates, by=c('ID'))
# one <- migTD %>% filter(ID == unique(ID)[1]) %>% st_as_sf(coords = c("location.long","location.lat"), crs = 4326, agr = "constant")
# mapview::mapview(one)
# filter to only birds with at least the first full autumn migration
tracks <- migTD %>% filter(!is.na(end_autumn_1))
# filter to only migratory periods
tracks <- tracks %>% filter(
(timestamp > start_autumn_1) & (timestamp < end_autumn_1)   # 1st autumn migration
| (timestamp > start_spring_1) & (timestamp < end_spring_1) # 1st spring migration
| (timestamp > start_autumn_2) & (timestamp < end_autumn_2) # 2nd autumn mig.
| (timestamp > start_spring_2) & (timestamp < end_spring_2) # 2nd spring mig.
)
# For juvenile birds, retain only first autumn and spring migrations
tracks <- tracks %>% mutate(
filter = ifelse((age == 'juvenile') & (timestamp > start_autumn_2), TRUE, FALSE),
filter = ifelse(is.na(filter), FALSE, filter)
) %>% filter(
filter == FALSE
) %>% dplyr::select(-filter)
# summarise number of IDs with 1, 2, 3 migrations for autumn and spring
# tracks %>% filter(!is.na(end_autumn_1)) %>% summarise(n_distinct(ID))
# tracks %>% filter(!is.na(end_spring_1)) %>% summarise(n_distinct(ID))
# tracks %>% filter(!is.na(end_autumn_2) & age != "juvenile") %>% summarise(n_distinct(ID))
# tracks %>% filter(!is.na(end_spring_2) & age != "juvenile") %>% summarise(n_distinct(ID))
## rough downsample to speed things up ##
# tracks <- tracks %>%
#   filter(row_number() %% 2 == 1) # retain ever nth row
## track2KBA analysis ##
rm(migTD) # save memory
# analyze all migrations, only fall, or only spring?
analysis <- "all"
# analysis <- "fall"
# analysis <- "spring"
# analysis <- "juvenile"
# analysis <- "adult"
if(analysis == "fall"){
tracks <- tracks %>% filter(
((timestamp > start_autumn_1) | (timestamp < end_autumn_1)) |
((timestamp > start_autumn_2) | (timestamp < end_autumn_2))
)
} else if(analysis == "spring"){
tracks <- tracks %>% filter(
((timestamp > start_spring_1) | (timestamp < end_spring_1)) |
((timestamp > start_spring_2) | (timestamp < end_spring_2))
)
} else if(analysis == "juvenile"){
tracks <- tracks %>% filter(
age == "juvenile"
)
} else if(analysis == "adult"){
tracks <- tracks %>% filter(
age == "adult" | age == "immature"
)
}
# Format data
tracks <- formatFields(tracks, fieldID = "ID", fieldDateTime = "timestamp", fieldLat = "location.lat", fieldLon = "location.long")
# project to custom LAEA projection
TD <- projectTracks(tracks)
rm(tracks)
h <- 7.5
b4 <- Sys.time()
# rep <- repAssess(TD, KDE$KDE.Surface, iteration=1)
rep <- repAssess(TD, readRDS("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\data\\white_storks\\analysis\\KDE_h7.5.rds"), iteration=100, bootTable = T)
Sys.time() - b4
rep$out
# needs output of repAssess(bootTable=TRUE)
repr <- rep
reps <- repr[[2]]
Asymptote <- repr[[1]]$est_asym
summ <- reps %>%
group_by(.data$SampleSize) %>%
dplyr::summarise(
meanPred = mean(na.omit(.data$pred)),
sdInclude = sd(.data$InclusionMean))
yTemp <- c(
summ$meanPred + Asymptote * summ$sdInclude,
rev(summ$meanPred - Asymptote * summ$sdInclude)
)
xTemp <- c(summ$SampleSize, rev(summ$SampleSize))
Temps <- data.frame(xTemp, yTemp)
repPlot <- ggplot() +
geom_polygon(aes(x=xTemp, y=yTemp), data=Temps, fill="gray85") +
geom_point(aes(x=SampleSize, y=InclusionMean), data=reps, col="darkgray", size=0.75, alpha=0.15) +
geom_line(aes(x=SampleSize, y=meanPred), data=summ, size=1.5) +
annotate("text", x=0, y=0.99, label=paste(round(repr[[1]]$out, 1), "%", sep=""),
size=6, col="grey30", adj=0) +
theme(
axis.text=element_text(size=14, color="black"),
axis.title=element_text(size=16),
panel.background=element_rect(fill="white", colour="black"),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
ylab("Inclusion") + xlab("Sample Size")
repPlot
# White storks
ggsave("C:\\Users\\Martim Bill\\Documents\\mIBA_package\\figures\\white_storks\\all_represent_n76_h7_its100.png", plot = repPlot, width=7, height=6.5)
h
